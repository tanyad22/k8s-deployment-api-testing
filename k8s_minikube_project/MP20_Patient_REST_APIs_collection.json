{
	"info": {
		"_postman_id": "227eaef8-0fc4-449e-92da-170043fcc020",
		"name": "MP20_Patient_REST_APIs",
		"description": "Collection for cloud testing regarding Patient Module",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add Patient",
			"item": [
				{
					"name": "Get a Language by Locale",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"let host = pm.environment.get('host');",
									"",
									"let result = [];",
									"result = host.split(\".\");",
									"",
									"if (result[2] == 'sr')",
									"{",
									"    pm.test(\"The name of language should be Srpski\",function()",
									"    {",
									"        pm.expect(response.name).to.eql(\"Srpski\")",
									"    });",
									"",
									"     pm.test(\"The locale should be sr\",function()",
									"    {",
									"        pm.expect(response.locale).to.eql(\"sr\")",
									"       ",
									"    });",
									"    pm.environment.set(\"name\",response.name);",
									"}",
									"",
									"else if (result[2]== 'nl')",
									"{",
									"    pm.test(\"The name of language should be Nederlands\",function()",
									"    {",
									"        pm.expect(response.name).to.eql(\"Nederlands\")",
									"    });",
									"",
									"    pm.test(\"The locale should be nl\",function()",
									"    {",
									"        pm.expect(response.locale).to.eql(\"nl\")",
									"    });",
									"    pm.environment.set(\"name\",response.name);",
									"}",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/codebook/language",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"codebook",
								"language"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// response time should be below 400ms",
									"pm.test(\"Response time is below 200ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// random date of birth",
									"const moment = require('moment')",
									"pm.environment.set(\"dateOfBirth\", moment().add(_.random(-30000, -20000), 'days').format('YYYY-MM-DD'));",
									"",
									"pm.environment.set(\"firstName\",pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.environment.set(\"lastName\",pm.variables.replaceIn('{{$randomLastName}}'));",
									"let firstname = pm.environment.get('firstName');",
									"let lastname = pm.environment.get('lastName');",
									"pm.environment.set(\"initials\", firstname.charAt(0) + \".\" + lastname.charAt(0) + \".\");",
									"",
									"let gender_types = [\"NOT_KNOW\", \"MALE\", \"FEMALE\", \"NOT_APPLICABLE\"];",
									"pm.environment.set(\"gender\",gender_types[_.random(0,3)]);",
									"",
									"",
									"let nameOrdering = [\"INITIALS_LAST_NAME\", \"INITIALS_LAST_NAME_PARTNER_NAME\", \"INITIALS_PARTNER_NAME\", \"INITIALS_PARTNER_NAME_LAST_NAME\", \"FIRST_NAME_MIDDLE_NAME_LAST_NAME\"];",
									"pm.environment.set(\"nameOrdering\",nameOrdering[_.random(0,4)]);",
									"",
									"let vip = [true,false];",
									"pm.environment.set(\"vip\",vip[_.random(0,1)]);",
									"",
									"pm.environment.set(\"numberOfTries\",100);",
									"pm.environment.set(\"status\",\"ACTIVE\");",
									"pm.environment.set(\"personalId\",pm.variables.replaceIn('{{$randomBankAccount}}'));",
									"pm.environment.set(\"patientNumber\",pm.variables.replaceIn('{{$randomBankAccount}}'));",
									"//pm.environment.set(\"language\",pm.variables.replaceIn('{{$randomLocale}}'))",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"gender\": \"{{gender}}\",\r\n  \"initials\": \"{{initials}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"middleName\": \"{{firstName}}\",\r\n  \"nameOrdering\": \"{{nameOrdering}}\",\r\n  \"patientNumber\": \"{{patientNumber}}\",\r\n  \"personalId\": \"{{personalId}}\",\r\n  \"vip\": \"{{vip}}\",\r\n  \"status\": \"{{status}}\",\r\n  \"numberOfTries\": \"{{numberOfTries}}\",\r\n  \"nativeLanguages\":\r\n  [\r\n      \"{{name}}\"\r\n  ]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/core/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"patients"
							]
						},
						"description": "Store a patient"
					},
					"response": []
				},
				{
					"name": "Get ALL patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"// validate that patient with patientID  is present into the resault set  ",
									"pm.test('Has patientID', function() {",
									"    let has_id = false;",
									"    let counter = 0;",
									"    response.content.forEach(function(object){",
									"      if(object.id === pm.environment.get(\"patientID\")) {",
									"         has_id = true;",
									"         counter++;",
									"      }",
									"  });",
									"    pm.expect((has_id) && (counter == 1) ).to.eql(true);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response is not null\"] = jsonData !== null ;",
									"",
									"",
									"// response time should be below 300ms",
									"pm.test(\"Response time is below 300ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);    ",
									"});",
									"pm.environment.unset(\"patientNumber\");",
									"pm.environment.unset(\"personalId\");",
									"pm.environment.unset(\"gender\");",
									"pm.environment.unset(\"firstName\");",
									"pm.environment.unset(\"lastName\");",
									"pm.environment.unset(\"vip\");",
									"pm.environment.unset(\"status\");",
									"pm.environment.unset(\"initials\");",
									"pm.environment.unset(\"dateOfBirth\");",
									"pm.environment.unset(\"nameOrdering\");",
									"pm.environment.unset(\"numberOfTries\");",
									"pm.environment.unset(\"locale\");",
									"pm.environment.unset(\"name\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"patients"
							]
						},
						"description": "Get a list of patients"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search Patient ",
			"item": [
				{
					"name": "Get a Patient ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Patients should have ID\", function () {",
									"    response.content.forEach(function (content) {",
									"        pm.expect(content).to.haveOwnProperty(\"id\");",
									"    });",
									"});",
									"",
									"let randomPatient;",
									"for (i = 0; i < response.content.length - 1; i++) {",
									"    randomPatient = response.content[_.random(0, response.content.length - 1)];",
									"    {",
									"        if (randomPatient.middleName != null && randomPatient.personalId != null) {",
									"            pm.environment.set(\"firstName\", randomPatient.firstName);",
									"            pm.environment.set(\"middleName\", randomPatient.middleName);",
									"            pm.environment.set(\"lastName\", randomPatient.lastName);",
									"            pm.environment.set(\"personalId\", randomPatient.personalId);",
									"            pm.environment.set(\"patientNumber\",randomPatient.patientNumber);",
									"            break;",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"numRecordsPerPage\",_.random(1,20));",
									"pm.environment.set(\"numPages\",_.random(1,20));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/patients?pages={{numPages}}&size={{numRecordsPerPage}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"patients"
							],
							"query": [
								{
									"key": "pages",
									"value": "{{numPages}}"
								},
								{
									"key": "size",
									"value": "{{numRecordsPerPage}}"
								}
							]
						},
						"description": "Store random patient for later purpose"
					},
					"response": []
				},
				{
					"name": "Search Patient by Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lastName = pm.environment.get(\"lastName\");",
									"const firstName = pm.environment.get(\"firstName\");",
									"const middleName = pm.environment.get(\"middleName\");",
									"",
									"const firstLastName = firstName +\" \"+ lastName;",
									"const firstMiddletName = firstName +\" \"+ middleName;",
									"const middleLastName = middleName +\" \"+ lastName;",
									"const firstMiddleLastName = firstName +\" \"+ middleName +\" \"+ lastName;",
									"",
									"const name = [lastName,firstName,firstLastName,middleName,firstMiddletName,middleLastName,firstMiddleLastName];",
									"pm.environment.set(\"name\",name[_.random(0,6)]); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Search patient by name\",function(){",
									"    if(pm.environment.get(\"name\") == pm.environment.get(\"firstName\"))",
									"    {",
									"        response.content.forEach(function(object){",
									"            pm.expect(object.firstName).to.eql(pm.environment.get(\"name\"))",
									"      });",
									"    }",
									"    else if(pm.environment.get(\"name\") == pm.environment.get(\"lastName\"))",
									"    {",
									"        response.content.forEach(function(object){",
									"            pm.expect(object.lastName).to.eql(pm.environment.get(\"name\"))",
									"      });",
									"    }",
									"    else if(pm.environment.get(\"name\") == (pm.environment.get(\"firstName\")+ \" \" + pm.environment.get(\"lastName\")))",
									"    {",
									"        response.content.forEach(function(object){",
									"            pm.expect(object.firstName).to.eql(pm.environment.get(\"firstName\"))",
									"            pm.expect(object.lastName).to.eql(pm.environment.get(\"lastName\"))",
									"      });",
									"    }",
									"    else if(pm.environment.get(\"name\") == (pm.environment.get(\"firstName\")+ \" \" + pm.environment.get(\"middleName\")))",
									"    {",
									"        response.content.forEach(function(object){",
									"            pm.expect(object.firstName).to.eql(pm.environment.get(\"firstName\"))",
									"            pm.expect(object.middleName).to.eql(pm.environment.get(\"middleName\"))",
									"      });",
									"    }",
									"      else if(pm.environment.get(\"name\") == (pm.environment.get(\"middleName\")+ \" \" + pm.environment.get(\"lastName\")))",
									"    {",
									"        response.content.forEach(function(object){",
									"            pm.expect(object.middleName).to.eql(pm.environment.get(\"middleName\"))",
									"            pm.expect(object.lastName).to.eql(pm.environment.get(\"lastName\"))",
									"      });",
									"    }",
									"    else",
									"    {",
									"         response.content.forEach(function(object){",
									"            pm.expect(object.firstName).to.eql(pm.environment.get(\"firstName\"))",
									"            pm.expect(object.middleName).to.eql(pm.environment.get(\"middleName\"))",
									"            pm.expect(object.lastName).to.eql(pm.environment.get(\"lastName\"))",
									"        });",
									"    }",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response is not null\"] = jsonData !== null ;",
									"",
									"pm.test(\"Response time is less than 400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/patients?name={{name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"patients"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Patient by patientNumber and PersonalID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const searchTerm = [pm.environment.get(\"personalId\"),pm.environment.get(\"patientNumber\")];",
									"pm.environment.set(\"searchTerm\",searchTerm[_.random(0,1)])"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Search patient by personalId or patientNumber\",function(){",
									"    if(pm.environment.get(\"searchTerm\") == pm.environment.get(\"personalId\"))",
									"    {",
									"        response.content.forEach(function(object){",
									"            pm.expect(object.personalId).to.eql(pm.environment.get(\"searchTerm\"))",
									"      });",
									"    }",
									"    else",
									"    {",
									"         response.content.forEach(function(object){",
									"            pm.expect(object.patientNumber).to.eql(pm.environment.get(\"searchTerm\"))",
									"        });",
									"    }",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response is not null\"] = jsonData !== null ;",
									"",
									"pm.test(\"Response time is less than 400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/patients?searchTerm={{searchTerm}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"patients"
							],
							"query": [
								{
									"key": "searchTerm",
									"value": "{{searchTerm}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Patient by SearchTerm and Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Search patient by name\",function(){",
									"    if(pm.environment.get(\"name\") == pm.environment.get(\"firstName\"))",
									"    {",
									"        response.content.forEach(function(object){",
									"            pm.expect(object.firstName).to.eql(pm.environment.get(\"name\"))",
									"      });",
									"    }",
									"    else if(pm.environment.get(\"name\") == pm.environment.get(\"lastName\"))",
									"    {",
									"        response.content.forEach(function(object){",
									"            pm.expect(object.lastName).to.eql(pm.environment.get(\"name\"))",
									"      });",
									"    }",
									"    else if(pm.environment.get(\"name\") == (pm.environment.get(\"firstName\")+ \" \" + pm.environment.get(\"lastName\")))",
									"    {",
									"        response.content.forEach(function(object){",
									"            pm.expect(object.firstName).to.eql(pm.environment.get(\"firstName\"))",
									"            pm.expect(object.lastName).to.eql(pm.environment.get(\"lastName\"))",
									"      });",
									"    }",
									"    else if(pm.environment.get(\"name\") == (pm.environment.get(\"firstName\")+ \" \" + pm.environment.get(\"middleName\")))",
									"    {",
									"        response.content.forEach(function(object){",
									"            pm.expect(object.firstName).to.eql(pm.environment.get(\"firstName\"))",
									"            pm.expect(object.middleName).to.eql(pm.environment.get(\"middleName\"))",
									"      });",
									"    }",
									"      else if(pm.environment.get(\"name\") == (pm.environment.get(\"middleName\")+ \" \" + pm.environment.get(\"lastName\")))",
									"    {",
									"        response.content.forEach(function(object){",
									"            pm.expect(object.middleName).to.eql(pm.environment.get(\"middleName\"))",
									"            pm.expect(object.lastName).to.eql(pm.environment.get(\"lastName\"))",
									"      });",
									"    }",
									"    else",
									"    {",
									"         response.content.forEach(function(object){",
									"            pm.expect(object.firstName).to.eql(pm.environment.get(\"firstName\"))",
									"            pm.expect(object.middleName).to.eql(pm.environment.get(\"middleName\"))",
									"            pm.expect(object.lastName).to.eql(pm.environment.get(\"lastName\"))",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Search patient by personalId or patientNumber\",function(){",
									"    if(pm.environment.get(\"searchTerm\") == pm.environment.get(\"personalId\"))",
									"    {",
									"        response.content.forEach(function(object){",
									"            pm.expect(object.personalId).to.eql(pm.environment.get(\"searchTerm\"))",
									"      });",
									"    }",
									"    else",
									"    {",
									"         response.content.forEach(function(object){",
									"            pm.expect(object.patientNumber).to.eql(pm.environment.get(\"searchTerm\"))",
									"        });",
									"    }",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response is not null\"] = jsonData !== null ;",
									"",
									"pm.test(\"Response time is less than 400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"pm.environment.unset(\"name\");",
									"pm.environment.unset(\"lastName\");",
									"pm.environment.unset(\"middleName\");",
									"pm.environment.unset(\"firstName\");",
									"pm.environment.unset(\"personalId\");",
									"pm.environment.unset(\"patientNumber\");",
									"pm.environment.unset(\"searchTerm\");",
									"pm.environment.unset(\"numPages\");",
									"pm.environment.unset(\"numRecordsPerPage\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const searchTerm = [pm.environment.get(\"personalId\"),pm.environment.get(\"patientNumber\")];",
									"pm.environment.set(\"searchTerm\",searchTerm[_.random(0,1)])",
									"",
									"const lastName = pm.environment.get(\"lastName\");",
									"const firstName = pm.environment.get(\"firstName\");",
									"const middleName = pm.environment.get(\"middleName\");",
									"",
									"const firstLastName = firstName +\" \"+ lastName;",
									"const firstMiddletName = firstName +\" \"+ middleName;",
									"const middleLastName = middleName +\" \"+ lastName;",
									"const firstMiddleLastName = firstName +\" \"+ middleName +\" \"+ lastName;",
									"",
									"const name = [lastName,firstName,firstLastName,middleName,firstMiddletName,middleLastName,firstMiddleLastName];",
									"pm.environment.set(\"name\",name[_.random(0,6)]); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/patients?name={{name}}&searchTerm={{searchTerm}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"patients"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "searchTerm",
									"value": "{{searchTerm}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Patient Allergy",
			"item": [
				{
					"name": "Get a Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Patients should have ID\",function(){",
									"    response.content.forEach(function(content){",
									"        pm.expect(content).to.haveOwnProperty(\"id\");",
									"    });",
									"});",
									"",
									"let randomPatient=response.content[_.random(0,response.content.length-1)]; //get random patient ",
									"pm.environment.set(\"patientID\", randomPatient.id);",
									"",
									"pm.test(\"Response time is below 152\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(152);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/patients?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"patients"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random patient for later purpose"
					},
					"response": []
				},
				{
					"name": "Get an Allergy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Allergies should have ID\",function(){\r",
									"    response.content.forEach(function(content){\r",
									"        pm.expect(content).to.haveOwnProperty(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomAllergy=response.content[_.random(0,response.content.length-1)]; //get random allergy \r",
									"pm.environment.set(\"allergyID\", randomAllergy.id);\r",
									"\r",
									"pm.test(\"Response time is below 137\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(137);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/allergies",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"allergies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Medication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Medications should have ID\",function(){",
									"    response.content.forEach(function(content){",
									"        pm.expect(content).to.haveOwnProperty(\"id\");",
									"    });",
									"});",
									"",
									"let randomMedication=response.content[_.random(0,response.content.length-1)]; //get random allergy ",
									"pm.environment.set(\"medicationID\", randomMedication.id);",
									"",
									"// response time should be below 500ms",
									"pm.test(\"Response time is below 305\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(305);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/medications?page={{page}}&size={{size}}&status=ACTIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"medications"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								},
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						},
						"description": "Get list of all medications"
					},
					"response": []
				},
				{
					"name": "Create a Patient Allergy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"description\",pm.variables.replaceIn('{{$randomPhrase}}'));\r",
									"\r",
									"const type = [\"GENERAL\", \"MEDICATION\"];\r",
									"pm.environment.set(\"type\", type[_.random(0,1)]);\r",
									"if(pm.environment.get(\"type\")==\"MEDICATION\"){\r",
									"    pm.environment.set(\"variable\",\"medicationId\");\r",
									"    pm.environment.set(\"variableID\",pm.environment.get(\"medicationID\"));\r",
									"}\r",
									"else{\r",
									"    pm.environment.set(\"variable\",\"allergyId\");\r",
									"    pm.environment.set(\"variableID\",pm.environment.get(\"allergyID\"));\r",
									"}\r",
									"\r",
									"const gravity = [\"GRADE_1_MILD\", \"GRADE_2_MODERATE\", \"GRADE_3_SERIOUS\", \"GRADE_4_DEATH\"];\r",
									"pm.environment.set(\"gravity\", gravity[_.random(0,3)]);\r",
									"\r",
									"const status = [ \"NOT_APPLICABLE_ANYMORE\", \"ACTIVE\", \"OBSOLETE\" ];\r",
									"pm.environment.set(\"status\",status[_.random(0,2)]);\r",
									"\r",
									"const symptoms=[ \"ANAPHYLAXIS\", \"ANGIOEDEMA\", \"UPPER_RESPIRATORY_TRACT_HYPERSENSITIVITY_REACTION\", \"DYSPNEA\", \"BRONCHOSPASM\", \"URTICARIA\", \"CONTACT_DERMATITIS\", \"ITCHING_OF_SKIN\", \"ERUPTION_OF_SKIN\", \"ALLERGIC_CONJUNCTIVITIS\", \"TOXIC_EPIDERMAL_NECROLYSIS\", \"NAUSEA_AND_VOMITING\", \"DIARRHOEA\", \"DRUG_INDUCED_ERYTHEMA_MULTIFORME\", \"FEVER\" ]\r",
									"pm.environment.set(\"value\",symptoms[_.random(0,14)]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"pm.environment.set(\"patientAllergyID\",response.id);\r",
									"\r",
									"pm.test(\"Allergy should be added to a patient with allergy or medication ID\", function(){\r",
									"    if(pm.environment.get(\"type\")==\"MEDICATION\"){\r",
									"        pm.expect(response.medication.id).to.eql(pm.environment.get(\"medicationID\"));\r",
									"    }\r",
									"    else{\r",
									"        pm.expect(response.allergy.id).to.eql(pm.environment.get(\"allergyID\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be added to a patient with description\", function(){\r",
									"    pm.expect(response.description).to.eql(pm.environment.get(\"description\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be added to a patient with type\", function(){\r",
									"    pm.expect(response.type).to.eql(pm.environment.get(\"type\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be added to a patient with gravity\", function(){\r",
									"    pm.expect(response.gravity).to.eql(pm.environment.get(\"gravity\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be added to a patient with status\", function(){\r",
									"    pm.expect(response.status).to.eql(pm.environment.get(\"status\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be added to a patient with allergy symptoms\", function(){\r",
									"    pm.expect(response.allergySymptom.values[0]).to.eql(pm.environment.get(\"value\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 243\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(243);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"{{variable}}\": \"{{variableID}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"type\": \"{{type}}\",\r\n  \"gravity\": \"{{gravity}}\",\r\n  \"status\": \"{{status}}\",\r\n  \"allergySymptom\": {\r\n    \"values\": [\r\n      \"{{value}}\"\r\n    ]\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/all/patient/{{patientID}}/allergies",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"all",
								"patient",
								"{{patientID}}",
								"allergies"
							]
						},
						"description": "Test request related to adding an allergy to a patient"
					},
					"response": []
				},
				{
					"name": "Get a Patient Allergy by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Patient allergy should have allergy or medication ID\", function(){\r",
									"    if(pm.environment.get(\"type\")==\"MEDICATION\"){\r",
									"        pm.expect(response.medication.id).to.eql(pm.environment.get(\"medicationID\"));\r",
									"    }\r",
									"    else{\r",
									"        pm.expect(response.allergy.id).to.eql(pm.environment.get(\"allergyID\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Patient allergy should have description\", function(){\r",
									"    pm.expect(response.description).to.eql(pm.environment.get(\"description\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient allergy should have type\", function(){\r",
									"    pm.expect(response.type).to.eql(pm.environment.get(\"type\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient allergy should have gravity\", function(){\r",
									"    pm.expect(response.gravity).to.eql(pm.environment.get(\"gravity\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient allergy should have status\", function(){\r",
									"    pm.expect(response.status).to.eql(pm.environment.get(\"status\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient allergy should have allergy symptoms\", function(){\r",
									"    pm.expect(response.allergySymptom.values[0]).to.eql(pm.environment.get(\"value\"));\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"pm.test(\"Response time is below 139\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(139);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/all/patient/{{patientID}}/allergies/{{patientAllergyID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"all",
								"patient",
								"{{patientID}}",
								"allergies",
								"{{patientAllergyID}}"
							]
						},
						"description": "Test request related to get a patient allergy by ID"
					},
					"response": []
				},
				{
					"name": "Get an Allergy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Allergies should have ID\",function(){\r",
									"    response.content.forEach(function(content){\r",
									"        pm.expect(content).to.haveOwnProperty(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomAllergy=response.content[_.random(0,response.content.length-1)]; //get random allergy \r",
									"pm.environment.set(\"allergyID\", randomAllergy.id);\r",
									"\r",
									"pm.test(\"Response time is below 137\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(137);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/allergies",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"allergies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Medication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Medications should have ID\",function(){",
									"    response.content.forEach(function(content){",
									"        pm.expect(content).to.haveOwnProperty(\"id\");",
									"    });",
									"});",
									"",
									"let randomMedication=response.content[_.random(0,response.content.length-1)]; //get random allergy ",
									"pm.environment.set(\"medicationID\", randomMedication.id);",
									"",
									"// response time should be below 500ms",
									"pm.test(\"Response time is below 305\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(305);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/medications?page={{page}}&size={{size}}&status=ACTIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"medications"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								},
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						},
						"description": "Get list of all medications"
					},
					"response": []
				},
				{
					"name": "Update a Patient Allergy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"description\",pm.variables.replaceIn('{{$randomPhrase}}'));\r",
									"\r",
									"if(pm.environment.get(\"type\")==\"MEDICATION\"){\r",
									"    pm.environment.set(\"variable\",\"medicationId\");\r",
									"    pm.environment.set(\"variableID\",pm.environment.get(\"medicationID\"));\r",
									"}\r",
									"else{\r",
									"    pm.environment.set(\"variable\",\"allergyId\");\r",
									"    pm.environment.set(\"variableID\",pm.environment.get(\"allergyID\"));\r",
									"}\r",
									"\r",
									"const gravity = [\"GRADE_1_MILD\", \"GRADE_2_MODERATE\", \"GRADE_3_SERIOUS\", \"GRADE_4_DEATH\"];\r",
									"pm.environment.set(\"gravity\", gravity[_.random(0,3)]);\r",
									"\r",
									"const status = [ \"NOT_APPLICABLE_ANYMORE\", \"ACTIVE\", \"OBSOLETE\" ];\r",
									"pm.environment.set(\"status\",status[_.random(0,2)]);\r",
									"\r",
									"const symptoms=[ \"ANAPHYLAXIS\", \"ANGIOEDEMA\", \"UPPER_RESPIRATORY_TRACT_HYPERSENSITIVITY_REACTION\", \"DYSPNEA\", \"BRONCHOSPASM\", \"URTICARIA\", \"CONTACT_DERMATITIS\", \"ITCHING_OF_SKIN\", \"ERUPTION_OF_SKIN\", \"ALLERGIC_CONJUNCTIVITIS\", \"TOXIC_EPIDERMAL_NECROLYSIS\", \"NAUSEA_AND_VOMITING\", \"DIARRHOEA\", \"DRUG_INDUCED_ERYTHEMA_MULTIFORME\", \"FEVER\" ]\r",
									"pm.environment.set(\"value\",symptoms[_.random(0,14)]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Allergy should be updated to a patient with allergy or medication\", function(){\r",
									"    if(pm.environment.get(\"type\")==\"MEDICATION\"){\r",
									"        pm.expect(response.medication.id).to.eql(pm.environment.get(\"medicationID\"));\r",
									"    }\r",
									"    else{\r",
									"        pm.expect(response.allergy.id).to.eql(pm.environment.get(\"allergyID\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be updated to a patient with description\", function(){\r",
									"    pm.expect(response.description).to.eql(pm.environment.get(\"description\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be updated to a patient with type\", function(){\r",
									"    pm.expect(response.type).to.eql(pm.environment.get(\"type\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be updated to a patient with gravity\", function(){\r",
									"    pm.expect(response.gravity).to.eql(pm.environment.get(\"gravity\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be updated to a patient with status\", function(){\r",
									"    pm.expect(response.status).to.eql(pm.environment.get(\"status\"));\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"pm.test(\"Response time is below 147\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(147);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"{{variable}}\": \"{{variableID}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"type\": \"{{type}}\",\r\n  \"gravity\": \"{{gravity}}\",\r\n  \"status\": \"{{status}}\",\r\n  \"allergySymptom\": {\r\n    \"values\": [\r\n      \"{{value}}\"\r\n    ]\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/all/patient/{{patientID}}/allergies/{{patientAllergyID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"all",
								"patient",
								"{{patientID}}",
								"allergies",
								"{{patientAllergyID}}"
							]
						},
						"description": "Test request related to updating a patient allergy"
					},
					"response": []
				},
				{
					"name": "Get all Patient Allergies by patientID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test('Has patient allergy ID', function() {\r",
									"    let has_code = false;\r",
									"    let counter = 0;\r",
									"    response.content.forEach(function(object){\r",
									"      if(object.id === pm.environment.get(\"patientAllergyID\")) {\r",
									"         has_code = true;\r",
									"         counter++;\r",
									"      }\r",
									"  });\r",
									"    pm.expect((has_code) && (counter == 1) ).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 119\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(119);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/all/patient/{{patientID}}/allergies",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"all",
								"patient",
								"{{patientID}}",
								"allergies"
							]
						},
						"description": "Get a list of all allergies that belong to a patient"
					},
					"response": []
				},
				{
					"name": "Remove Allergy from Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Patient allergy should be deleted\", function () {\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.deletedId).to.eql(pm.environment.get(\"patientAllergyID\"));\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 112\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(112);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/all/patient/{{patientID}}/allergies/{{patientAllergyID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"all",
								"patient",
								"{{patientID}}",
								"allergies",
								"{{patientAllergyID}}"
							]
						},
						"description": "Test request related to deleting a patient allergy"
					},
					"response": []
				},
				{
					"name": "Get all Patient Allergies by patientID (deleted allergy should not be present)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test('Has ID', function() {\r",
									"    let has_code = false;\r",
									"    response.content.forEach(function(object){\r",
									"      if(object.id === pm.environment.get(\"patientAllergyID\")) {\r",
									"         has_code = true;\r",
									"      }\r",
									"  });\r",
									"    pm.expect(has_code).to.eql(false);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 115\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(115);",
									"});\r",
									"\r",
									"pm.environment.unset(\"patientAllergyID\");\r",
									"pm.environment.unset(\"description\");\r",
									"pm.environment.unset(\"allergyID\");\r",
									"pm.environment.unset(\"status\");\r",
									"pm.environment.unset(\"type\");\r",
									"pm.environment.unset(\"gravity\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/all/patient/{{patientID}}/allergies",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"all",
								"patient",
								"{{patientID}}",
								"allergies"
							]
						},
						"description": "Validate that the previously deleted patient allergy is no longer present"
					},
					"response": []
				},
				{
					"name": "Get an Allergy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Allergies should have ID\",function(){\r",
									"    response.content.forEach(function(content){\r",
									"        pm.expect(content).to.haveOwnProperty(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomAllergy=response.content[_.random(0,response.content.length-1)]; //get random allergy \r",
									"pm.environment.set(\"allergyID\", randomAllergy.id);\r",
									"\r",
									"pm.test(\"Response time is below 137\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(137);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/allergies",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"allergies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Medication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Medications should have ID\",function(){",
									"    response.content.forEach(function(content){",
									"        pm.expect(content).to.haveOwnProperty(\"id\");",
									"    });",
									"});",
									"",
									"let randomMedication=response.content[_.random(0,response.content.length-1)]; //get random allergy ",
									"pm.environment.set(\"medicationID\", randomMedication.id);",
									"",
									"// response time should be below 500ms",
									"pm.test(\"Response time is below 305\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(305);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/medications?page={{page}}&size={{size}}&status=ACTIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"medications"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								},
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						},
						"description": "Get list of all medications"
					},
					"response": []
				},
				{
					"name": "Create another Patient Allergy ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"description\",pm.variables.replaceIn('{{$randomPhrase}}'));\r",
									"\r",
									"const type = [\"GENERAL\", \"MEDICATION\"];\r",
									"pm.environment.set(\"type\", type[_.random(0,1)]);\r",
									"if(pm.environment.get(\"type\")==\"MEDICATION\"){\r",
									"    pm.environment.set(\"variable\",\"medicationId\");\r",
									"    pm.environment.set(\"variableID\",pm.environment.get(\"medicationID\"));\r",
									"}\r",
									"else{\r",
									"    pm.environment.set(\"variable\",\"allergyId\");\r",
									"    pm.environment.set(\"variableID\",pm.environment.get(\"allergyID\"));\r",
									"}\r",
									"\r",
									"const gravity = [\"GRADE_1_MILD\", \"GRADE_2_MODERATE\", \"GRADE_3_SERIOUS\", \"GRADE_4_DEATH\"];\r",
									"pm.environment.set(\"gravity\", gravity[_.random(0,3)]);\r",
									"\r",
									"const status = [ \"NOT_APPLICABLE_ANYMORE\", \"ACTIVE\", \"OBSOLETE\" ];\r",
									"pm.environment.set(\"status\",status[_.random(0,2)]);\r",
									"\r",
									"const symptoms=[ \"ANAPHYLAXIS\", \"ANGIOEDEMA\", \"UPPER_RESPIRATORY_TRACT_HYPERSENSITIVITY_REACTION\", \"DYSPNEA\", \"BRONCHOSPASM\", \"URTICARIA\", \"CONTACT_DERMATITIS\", \"ITCHING_OF_SKIN\", \"ERUPTION_OF_SKIN\", \"ALLERGIC_CONJUNCTIVITIS\", \"TOXIC_EPIDERMAL_NECROLYSIS\", \"NAUSEA_AND_VOMITING\", \"DIARRHOEA\", \"DRUG_INDUCED_ERYTHEMA_MULTIFORME\", \"FEVER\" ]\r",
									"pm.environment.set(\"value\",symptoms[_.random(0,14)]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"pm.environment.set(\"patientAllergyID\",response.id);\r",
									"\r",
									"pm.test(\"Allergy should be added to a patient with allergy or medication ID\", function(){\r",
									"    if(pm.environment.get(\"type\")==\"MEDICATION\"){\r",
									"        pm.expect(response.medication.id).to.eql(pm.environment.get(\"medicationID\"));\r",
									"    }\r",
									"    else{\r",
									"        pm.expect(response.allergy.id).to.eql(pm.environment.get(\"allergyID\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be added to a patient with description\", function(){\r",
									"    pm.expect(response.description).to.eql(pm.environment.get(\"description\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be added to a patient with type\", function(){\r",
									"    pm.expect(response.type).to.eql(pm.environment.get(\"type\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be added to a patient with gravity\", function(){\r",
									"    pm.expect(response.gravity).to.eql(pm.environment.get(\"gravity\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy should be added to a patient with status\", function(){\r",
									"    pm.expect(response.status).to.eql(pm.environment.get(\"status\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 130\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(130);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"{{variable}}\": \"{{variableID}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"type\": \"{{type}}\",\r\n  \"gravity\": \"{{gravity}}\",\r\n  \"status\": \"{{status}}\",\r\n  \"allergySymptom\": {\r\n    \"values\": [\r\n      \"{{value}}\"\r\n    ]\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/all/patient/{{patientID}}/allergies",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"all",
								"patient",
								"{{patientID}}",
								"allergies"
							]
						},
						"description": "Test request related to adding an allergy to a patient"
					},
					"response": []
				},
				{
					"name": "Delete All Patient Allergies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// response time should be below 400ms",
									"pm.test(\"Response time is below 138\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(138);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/all/patient/{{patientID}}/allergies",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"all",
								"patient",
								"{{patientID}}",
								"allergies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Patient Allergies by patientID (list should be empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Content is empty\",function(){\r",
									"    pm.expect(response.content).to.eql([]);\r",
									"});\r",
									"\r",
									"// response time should be below 400ms\r",
									"pm.test(\"Response time is below 101\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(101);",
									"});\r",
									"\r",
									"pm.environment.unset(\"patientAllergyID\");\r",
									"pm.environment.unset(\"allergyID\");\r",
									"pm.environment.unset(\"patientID\");\r",
									"pm.environment.unset(\"gravity\");\r",
									"pm.environment.unset(\"status\");\r",
									"pm.environment.unset(\"description\");\r",
									"pm.environment.unset(\"type\");\r",
									"pm.environment.unset(\"variable\");\r",
									"pm.environment.unset(\"variableID\");\r",
									"pm.environment.unset(\"page\");\r",
									"pm.environment.unset(\"size\");\r",
									"pm.environment.unset(\"medicationID\");\r",
									"pm.environment.unset(\"sort\");\r",
									"pm.environment.unset(\"value\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/all/patient/{{patientID}}/allergies",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"all",
								"patient",
								"{{patientID}}",
								"allergies"
							]
						},
						"description": "Get a list of all allergies that belong to a patient"
					},
					"response": []
				}
			],
			"description": "API test request related to Patient Allergy REST controller",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Patient Diagnose",
			"item": [
				{
					"name": "Get a Patient  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Patients should have ID\",function(){",
									"    response.content.forEach(function(content){",
									"        pm.expect(content).to.haveOwnProperty(\"id\");",
									"    });",
									"});",
									"",
									"let randomPatient=response.content[_.random(0,response.content.length-1)]; //get random patient ",
									"pm.environment.set(\"patientID\", randomPatient.id);",
									"",
									"pm.test(\"Response time is below 185\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(185);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/patients?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"patients"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random patient for later purpose"
					},
					"response": []
				},
				{
					"name": "Get a Diagnose",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"status\",\"ACTIVE\");",
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Diagnoses should have ID\",function(){\r",
									"    response.content.forEach(function(content){\r",
									"        pm.expect(content).to.haveOwnProperty(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomDiagnose=response.content[_.random(0,response.content.length-1)]; //get random diagnose \r",
									"pm.environment.set(\"diagnoseID\", randomDiagnose.id);\r",
									"pm.environment.set(\"customName\",randomDiagnose.name);\r",
									"pm.environment.set(\"specialismCode\",randomDiagnose.specialism.code); //this is also the conclusionSpecialism and mainSpecialism\r",
									"\r",
									"pm.test(\"Response time is below 258\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(258);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/diagnoses?status={{status}}&page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"diagnoses"
							],
							"query": [
								{
									"key": "status",
									"value": "{{status}}"
								},
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random diagnose for later purpose"
					},
					"response": []
				},
				{
					"name": "Add Diagnose to Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"year\",2020);\r",
									"pm.environment.set(\"month\",_.random(1,12));\r",
									"\r",
									"if(pm.environment.get(\"month\")%2!=0 || pm.environment.get(\"month\")==8)\r",
									"{\r",
									"    pm.environment.set(\"day\",_.random(1,31));\r",
									"}\r",
									"else if(pm.environment.get(\"month\")==2)\r",
									"{\r",
									"    pm.environment.set(\"day\",_.random(1,29));\r",
									"}\r",
									"else\r",
									"{\r",
									"    pm.environment.set(\"day\",_.random(1,30));\r",
									"}\r",
									"\r",
									"pm.environment.set(\"note\",pm.variables.replaceIn('{{$randomCatchPhrase}}'));\r",
									"\r",
									"const diagnoseLabelType = [\"ACTIVE_DIAGNOSE_LABEL\", \"RELEVANT_HISTORY_LABEL\", \"GENERAL_HISTORY_LABEL\", \"MAIN_DIAGNOSE_LABEL\"];\r",
									"pm.environment.set(\"diagnoseLabelType\",diagnoseLabelType[_.random(0,3)]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"pm.environment.set(\"patientDiagnoseID\",response.id);\r",
									"\r",
									"pm.test(\"Diagnose should be added to a patient with diagnose ID\", function(){\r",
									"    pm.expect(response.diagnose.id).to.eql(pm.environment.get(\"diagnoseID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be added to a patient with start year\", function(){\r",
									"    pm.expect(response.startYear).to.eql(pm.environment.get(\"year\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be added to a patient with start month\", function(){\r",
									"    pm.expect(response.startMonth).to.eql(pm.environment.get(\"month\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be added to a patient with start day\", function(){\r",
									"    pm.expect(response.startDay).to.eql(pm.environment.get(\"day\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be added to a patient with specialism\", function(){\r",
									"    pm.expect(response.specialismInternalCode).to.eql(pm.environment.get(\"specialismCode\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be added to a patient with customName\", function(){\r",
									"    pm.expect(response.customName).to.eql(pm.environment.get(\"customName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be added to a patient with note\", function(){\r",
									"    pm.expect(response.note).to.eql(pm.environment.get(\"note\"));\r",
									"});\r",
									"\r",
									"if(pm.environment.get(\"diagnoseLabelType\")==\"ACTIVE_DIAGNOSE_LABEL\")\r",
									"{\r",
									"    pm.test(\"Diagnose should be added to a patient with diagnoseLabel - activeSpecialisms \", function(){\r",
									"    pm.expect(response.diagnoseLabel.activeSpecialisms[0].specialismCode).to.eql(pm.environment.get(\"specialismCode\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"else if(pm.environment.get(\"diagnoseLabelType\")==\"RELEVANT_HISTORY_LABEL\")\r",
									"{\r",
									"    pm.test(\"Diagnose should be added to a patient with diagnoseLabel - relevantSpecialisms \", function(){\r",
									"    pm.expect(response.diagnoseLabel.relevantSpecialisms[0].specialismCode).to.eql(pm.environment.get(\"specialismCode\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"else if(pm.environment.get(\"diagnoseLabelType\")==\"GENERAL_HISTORY_LABEL\")\r",
									"{\r",
									"    pm.test(\"Diagnose should be added to a patient with diagnoseLabel - generalSpecialisms\", function(){\r",
									"    pm.expect(response.diagnoseLabel.generalSpecialisms[0].specialismCode).to.eql(pm.environment.get(\"specialismCode\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"else\r",
									"{\r",
									"    pm.test(\"Diagnose should be added to a patient with diagnoseLabel - mainSpecialisms \", function(){\r",
									"    pm.expect(response.diagnoseLabel.mainSpecialisms).to.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is below 333\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(333);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"diagnoseId\": \"{{diagnoseID}}\",\r\n  \"patientId\": \"{{patientID}}\",\r\n  \"specialismInternalCode\": \"{{specialismCode}}\",\r\n  \"diagnoseLabelType\": \"{{diagnoseLabelType}}\",\r\n  \"note\": \"{{note}}\",\r\n  \"customName\": \"{{customName}}\",\r\n  \"startYear\": \"{{year}}\",\r\n  \"startMonth\": \"{{month}}\",\r\n  \"startDay\": \"{{day}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/patients/diagnoses",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"patients",
								"diagnoses"
							]
						},
						"description": "Test request related to adding a patient diagnose"
					},
					"response": []
				},
				{
					"name": "Get Patient Diagnose by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Diagnose should have diagnose ID\", function(){\r",
									"    pm.expect(response.diagnose.id).to.eql(pm.environment.get(\"diagnoseID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should have start year\", function(){\r",
									"    pm.expect(response.startYear).to.eql(pm.environment.get(\"year\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should have start month\", function(){\r",
									"    pm.expect(response.startMonth).to.eql(pm.environment.get(\"month\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should have start day\", function(){\r",
									"    pm.expect(response.startDay).to.eql(pm.environment.get(\"day\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should have specialism\", function(){\r",
									"    pm.expect(response.specialismInternalCode).to.eql(pm.environment.get(\"specialismCode\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be have customName\", function(){\r",
									"    pm.expect(response.customName).to.eql(pm.environment.get(\"customName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should have with note\", function(){\r",
									"    pm.expect(response.note).to.eql(pm.environment.get(\"note\"));\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"pm.test(\"Response time is below 211\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(211);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/patients/diagnoses/{{patientDiagnoseID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"patients",
								"diagnoses",
								"{{patientDiagnoseID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(NT) Add Diagnose with endYear > startYear",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"endYear\",_.random(2010,2021));\r",
									"let endYear = pm.environment.get(\"endYear\");\r",
									"pm.environment.set(\"startYear\",endYear+1);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should contain message for year validation\",function(){\r",
									"    pm.expect(response.IllegalArgumentException).to.eql(\"Start date cannot be after end date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 122\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(122);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"diagnoseId\": \"{{diagnoseID}}\",\r\n  \"patientId\": \"{{patientID}}\",\r\n  \"specialismInternalCode\": \"{{specialismCode}}\",\r\n  \"diagnoseLabelType\": \"{{diagnoseLabelType}}\",\r\n  \"note\": \"{{note}}\",\r\n  \"customName\": \"{{customName}}\",\r\n  \"startYear\": \"{{startYear}}\",\r\n  \"startMonth\": \"{{month}}\",\r\n  \"startDay\": \"{{day}}\",\r\n  \"endYear\": \"{{endYear}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/patients/diagnoses",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"patients",
								"diagnoses"
							]
						},
						"description": "Test request related to adding a patient diagnose"
					},
					"response": []
				},
				{
					"name": "(NT) Add Diagnose with endMonth > startMonth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"endMonth\",_.random(1,11));\r",
									"let endMonth = pm.environment.get(\"endMonth\");\r",
									"pm.environment.set(\"startMonth\",endMonth+1);\r",
									"// pm.environment.set(\"endYear\",2020);\r",
									"// pm.environment.set(\"startYear\",2020);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should contain message for year validation\",function(){\r",
									"    pm.expect(response.IllegalArgumentException).to.eql(\"Start date cannot be after end date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 210\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(210);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"diagnoseId\": \"{{diagnoseID}}\",\r\n  \"patientId\": \"{{patientID}}\",\r\n  \"specialismInternalCode\": \"{{specialismCode}}\",\r\n  \"diagnoseLabelType\": \"{{diagnoseLabelType}}\",\r\n  \"note\": \"{{note}}\",\r\n  \"customName\": \"{{customName}}\",\r\n  \"startYear\": \"{{startYear}}\",\r\n  \"startMonth\": \"{{startMonth}}\",\r\n  \"endMonth\": \"{{endMonth}}\",\r\n  \"startDay\": \"{{startDay}}\",\r\n  \"endYear\": \"{{endYear}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/patients/diagnoses",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"patients",
								"diagnoses"
							]
						},
						"description": "Test request related to adding a patient diagnose"
					},
					"response": []
				},
				{
					"name": "(NT) Add Diagnose with endDay > startDay",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"endDay\",_.random(1,28));\r",
									"let endDay = pm.environment.get(\"endDay\");\r",
									"pm.environment.set(\"startDay\",endDay+1);\r",
									"// pm.environment.set(\"endMonth\",11);\r",
									"// pm.environment.set(\"startMonth\",11);\r",
									"// pm.environment.set(\"endYear\",2020);\r",
									"// pm.environment.set(\"startYear\",2020);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should contain message for year validation\",function(){\r",
									"    pm.expect(response.IllegalArgumentException).to.eql(\"Start date cannot be after end date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 161\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(161);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"diagnoseId\": \"{{diagnoseID}}\",\r\n  \"patientId\": \"{{patientID}}\",\r\n  \"specialismInternalCode\": \"{{specialismCode}}\",\r\n  \"diagnoseLabelType\": \"{{diagnoseLabelType}}\",\r\n  \"note\": \"{{note}}\",\r\n  \"customName\": \"{{customName}}\",\r\n  \"startYear\": \"{{startYear}}\",\r\n  \"startMonth\": \"{{startMonth}}\",\r\n  \"endMonth\": \"{{endMonth}}\",\r\n  \"startDay\": \"{{startDay}}\",\r\n  \"endYear\": \"{{endYear}}\",\r\n  \"endDay\": {{endDay}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/patients/diagnoses",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"patients",
								"diagnoses"
							]
						},
						"description": "Test request related to adding a patient diagnose"
					},
					"response": []
				},
				{
					"name": "Update Patient Diagnose",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"year\",2020);\r",
									"pm.environment.set(\"month\",_.random(1,12));\r",
									"\r",
									"if(pm.environment.get(\"month\")%2!=0 || pm.environment.get(\"month\")==8)\r",
									"{\r",
									"    pm.environment.set(\"day\",_.random(1,31));\r",
									"}\r",
									"else if(pm.environment.get(\"month\")==2)\r",
									"{\r",
									"    pm.environment.set(\"day\",_.random(1,29));\r",
									"}\r",
									"else\r",
									"{\r",
									"    pm.environment.set(\"day\",_.random(1,30));\r",
									"}\r",
									"\r",
									"pm.environment.set(\"note\",pm.variables.replaceIn('{{$randomCatchPhrase}}'));\r",
									"\r",
									"const diagnoseLabelType = [\"ACTIVE_DIAGNOSE_LABEL\", \"RELEVANT_HISTORY_LABEL\", \"GENERAL_HISTORY_LABEL\", \"MAIN_DIAGNOSE_LABEL\"];\r",
									"pm.environment.set(\"diagnoseLabelType\",diagnoseLabelType[_.random(0,3)]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Diagnose should be updated with start year\", function(){\r",
									"    pm.expect(response.startYear).to.eql(pm.environment.get(\"year\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be updated with start month\", function(){\r",
									"    pm.expect(response.startMonth).to.eql(pm.environment.get(\"month\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be updated with start day\", function(){\r",
									"    pm.expect(response.startDay).to.eql(pm.environment.get(\"day\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be updated with specialism\", function(){\r",
									"    pm.expect(response.specialismInternalCode).to.eql(pm.environment.get(\"specialismCode\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be updated with customName\", function(){\r",
									"    pm.expect(response.customName).to.eql(pm.environment.get(\"customName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be updated with note\", function(){\r",
									"    pm.expect(response.note).to.eql(pm.environment.get(\"note\"));\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"pm.test(\"Response time is below 254\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(254);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n  \"patientId\": \"{{patientID}}\",\r\n  \"note\": \"{{note}}\",\r\n  \"customName\": \"{{customName}}\",\r\n  \"startYear\": \"{{year}}\",\r\n  \"startMonth\": \"{{month}}\",\r\n  \"startDay\": \"{{day}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/patients/diagnoses/{{patientDiagnoseID}}?specialismCode={{specialismCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"patients",
								"diagnoses",
								"{{patientDiagnoseID}}"
							],
							"query": [
								{
									"key": "specialismCode",
									"value": "{{specialismCode}}"
								}
							]
						},
						"description": "Test request related to updating a patient diagnose"
					},
					"response": []
				},
				{
					"name": "Transition(move/duplicate) from one diagnoseSpecialismLabel to another",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const diagnoseLabelType = [\"ACTIVE_DIAGNOSE_LABEL\", \"RELEVANT_HISTORY_LABEL\", \"GENERAL_HISTORY_LABEL\", \"MAIN_DIAGNOSE_LABEL\"];\r",
									"for(i=0;i<diagnoseLabelType.length-1;i++)\r",
									"{\r",
									"    if(pm.environment.get(\"diagnoseLabelType\")!=diagnoseLabelType[i])\r",
									"    {\r",
									"        pm.environment.set(\"transition\",diagnoseLabelType[i]);\r",
									"        break;\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"if(pm.environment.get(\"transition\")==\"ACTIVE_DIAGNOSE_LABEL\")\r",
									"{\r",
									"    pm.test(\"Diagnose should be added to a patient with diagnoseLabel - activeSpecialisms \", function(){\r",
									"    pm.expect(response.diagnoseLabel.activeSpecialisms[0].specialismCode).to.eql(pm.environment.get(\"specialismCode\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"else if(pm.environment.get(\"transition\")==\"RELEVANT_HISTORY_LABEL\")\r",
									"{\r",
									"    pm.test(\"Diagnose should be added to a patient with diagnoseLabel - relevantSpecialisms \", function(){\r",
									"    pm.expect(response.diagnoseLabel.relevantSpecialisms[0].specialismCode).to.eql(pm.environment.get(\"specialismCode\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"else if(pm.environment.get(\"transition\")==\"GENERAL_HISTORY_LABEL\")\r",
									"{\r",
									"    pm.test(\"Diagnose should be added to a patient with diagnoseLabel - generalSpecialisms\", function(){\r",
									"    pm.expect(response.diagnoseLabel.generalSpecialisms[0].specialismCode).to.eql(pm.environment.get(\"specialismCode\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"else\r",
									"{\r",
									"    pm.test(\"Diagnose should be added to a patient with diagnoseLabel - mainSpecialisms \", function(){\r",
									"    pm.expect(response.diagnoseLabel.mainSpecialisms).to.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 167\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(167);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/patients/diagnoses/transition?patientDiagnoseId={{patientDiagnoseID}}&specialismCode={{specialismCode}}&diagnoseLabelTransitionFrom={{diagnoseLabelType}}&diagnoseLabelTransitionTo={{transition}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"patients",
								"diagnoses",
								"transition"
							],
							"query": [
								{
									"key": "patientDiagnoseId",
									"value": "{{patientDiagnoseID}}"
								},
								{
									"key": "specialismCode",
									"value": "{{specialismCode}}"
								},
								{
									"key": "diagnoseLabelTransitionFrom",
									"value": "{{diagnoseLabelType}}"
								},
								{
									"key": "diagnoseLabelTransitionTo",
									"value": "{{transition}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Patient Diagnose by Predicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Diagnose should have diagnose ID\", function(){\r",
									"    pm.expect(response[0].diagnose.id).to.eql(pm.environment.get(\"diagnoseID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should have start year\", function(){\r",
									"    pm.expect(response[0].startYear).to.eql(pm.environment.get(\"year\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should have start month\", function(){\r",
									"    pm.expect(response[0].startMonth).to.eql(pm.environment.get(\"month\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should have start day\", function(){\r",
									"    pm.expect(response[0].startDay).to.eql(pm.environment.get(\"day\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should have specialism\", function(){\r",
									"    pm.expect(response[0].specialismInternalCode).to.eql(pm.environment.get(\"specialismCode\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should be have customName\", function(){\r",
									"    pm.expect(response[0].customName).to.eql(pm.environment.get(\"customName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Diagnose should have with note\", function(){\r",
									"    pm.expect(response[0].note).to.eql(pm.environment.get(\"note\"));\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"pm.test(\"Response time is below 198\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(198);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/patients/{{patientID}}/diagnoses/search?specialismCode={{specialismCode}}&searchDiagnose={{customName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"patients",
								"{{patientID}}",
								"diagnoses",
								"search"
							],
							"query": [
								{
									"key": "specialismCode",
									"value": "{{specialismCode}}"
								},
								{
									"key": "searchDiagnose",
									"value": "{{customName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check If Diagnose Is applied to Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Diagnose should be applied to a patient\", function () {\r",
									"    pm.expect(response).to.eql(true);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 186\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(186);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/diagnoses/{{diagnoseID}}/applied-diagnoses",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"diagnoses",
								"{{diagnoseID}}",
								"applied-diagnoses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Diagnoses of a Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test('Has ID', function() {\r",
									"    let has_code = false;\r",
									"    let counter = 0;\r",
									"    response.forEach(function(object){\r",
									"      if(object.id === pm.environment.get(\"patientDiagnoseID\")) {\r",
									"         has_code = true;\r",
									"         counter++;\r",
									"      }\r",
									"  });\r",
									"    pm.expect((has_code) && (counter == 1) ).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 156\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(156);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/patients/{{patientID}}/medication/diagnoses",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"patients",
								"{{patientID}}",
								"medication",
								"diagnoses"
							]
						},
						"description": "Get a list of all patient diagnoses by patientID"
					},
					"response": []
				},
				{
					"name": "Remove a Diagnose from Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Patient Diagnose should be removed\", function () {\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.deletedId).to.eql(pm.environment.get(\"patientDiagnoseID\"));\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 203\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(203);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/patients/diagnoses/{{patientDiagnoseID}}?specialismCode={{specialismCode}}&removeFromDiagnoseLabel={{diagnoseLabelType}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"patients",
								"diagnoses",
								"{{patientDiagnoseID}}"
							],
							"query": [
								{
									"key": "specialismCode",
									"value": "{{specialismCode}}"
								},
								{
									"key": "removeFromDiagnoseLabel",
									"value": "{{diagnoseLabelType}}"
								}
							]
						},
						"description": "Test request related to deleting patient diagnose by ID"
					},
					"response": []
				},
				{
					"name": "Get All Diagnoses of a Patient (removed diagnose should not be present)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test('Has ID', function() {\r",
									"    let has_code = false;\r",
									"    response.forEach(function(object){\r",
									"      if(object.id === pm.environment.get(\"patientDiagnoseID\")) {\r",
									"         has_code = true;\r",
									"      }\r",
									"  });\r",
									"    pm.expect(has_code).to.eql(false);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 138\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(138);",
									"});\r",
									"\r",
									"pm.environment.unset(\"diagnoseID\");\r",
									"pm.environment.unset(\"patientDiagnoseID\");\r",
									"pm.environment.unset(\"specialismCode\");\r",
									"pm.environment.unset(\"month\");\r",
									"pm.environment.unset(\"year\");\r",
									"pm.environment.unset(\"day\");\r",
									"pm.environment.unset(\"diagnoseLabelType\");\r",
									"pm.environment.unset(\"patientID\")\r",
									"pm.environment.unset(\"status\")\r",
									"pm.environment.unset(\"size\");\r",
									"pm.environment.unset(\"page\");\r",
									"pm.environment.unset(\"customName\");\r",
									"pm.environment.unset(\"note\");\r",
									"pm.environment.unset(\"transition\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/patients/{{patientID}}/medication/diagnoses",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"patients",
								"{{patientID}}",
								"medication",
								"diagnoses"
							]
						},
						"description": "Validate that the previously deleted patient diagnose is no longer present"
					},
					"response": []
				}
			],
			"description": "Test request regarding patient diagnose",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Patient Medication & Reason for Prescribing & Unit of Time",
			"item": [
				{
					"name": "Get a Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Patients should have ID\",function(){",
									"    response.content.forEach(function(content){",
									"        pm.expect(content).to.haveOwnProperty(\"id\");",
									"    });",
									"});",
									"",
									"let randomPatient=response.content[_.random(0,response.content.length-1)]; //get random patient ",
									"pm.environment.set(\"patientID\", randomPatient.id);",
									"",
									"pm.test(\"Response time is below 152\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(152);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/patients?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"patients"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random patient for later purpose"
					},
					"response": []
				},
				{
					"name": "Get a Medication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"let randomMedication=response.content[_.random(0,response.content.length-1)];\r",
									"pm.environment.set(\"medicationID\",randomMedication.id);\r",
									"pm.environment.set(\"medicationName\", randomMedication.name);\r",
									"pm.environment.set(\"medicationUnit\",randomMedication.medicationUnits.units[0]);\r",
									"pm.environment.set(\"administrationRoute\",randomMedication.medicationAdministrationRoutes.administrationRoutes[0]);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 500ms\r",
									"pm.test(\"Response time is below 305\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(305);",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/med/medications?status=ACTIVE&page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"medications"
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random medication for later purpose"
					},
					"response": []
				},
				{
					"name": "Get a Practitioner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"\r",
									"let randomPractitioner=response.content[_.random(0,response.content.length-1)];\r",
									"pm.environment.set(\"practitionerID\", randomPractitioner.id);\r",
									"\r",
									"pm.test(\"Response time is below 201\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/practitioners-page?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"practitioners-page"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random practitioner for later purpose"
					},
					"response": []
				},
				{
					"name": "Get a Specialism",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Specialisms should have code\",function(){\r",
									"    response.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"code\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomSpecialism=response[_.random(0,response.length-1)]; //get random specialism \r",
									"pm.environment.set(\"codeSpecialism\", randomSpecialism.code);\r",
									"\r",
									"pm.test(\"Response time is below 110\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(110);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/specialisms",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"specialisms"
							]
						},
						"description": "Store random specialism for later purpose"
					},
					"response": []
				},
				{
					"name": "(NT) Get a List of Reason for Prescribing (Authorization Validation)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"/*let response = pm.response.json();\r",
									"\r",
									"let randomReasonForPrescribing=response[_.random(0,response.length-1)]; \r",
									"pm.environment.set(\"reasonForPrescribing\", randomReasonForPrescribing);*/\r",
									"\r",
									"pm.test(\"Response time is below 89\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(89);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/med/reason-for-prescribing",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"reason-for-prescribing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a List of Units of Time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Units of time should have name\",function(){\r",
									"    response.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"name\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomUnitOfTime=response[_.random(0,response.length-1)]; \r",
									"pm.environment.set(\"unitOfTime\", randomUnitOfTime.name);\r",
									"\r",
									"pm.test(\"Response time is below 113\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(113);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/med/unit-of-time",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"unit-of-time"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Patient Medication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"pm.environment.set(\"patientMedicationID\", response.id);",
									"",
									"pm.test(\" Patient medication should be created with prescriptionName\", function () {",
									"    pm.expect(response.prescriptionName).to.eql(pm.environment.get(\"medicationName\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with startDate\", function () {",
									"    pm.expect(response.startDate).to.eql(pm.environment.get(\"startDate\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with frequency\", function () {",
									"    pm.expect(response.frequency).to.eql(JSON.stringify(pm.environment.get(\"frequency\")));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with unit\", function () {",
									"    pm.expect(response.unit).to.eql(pm.environment.get(\"medicationUnit\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with administration route\", function () {",
									"    pm.expect(response.route).to.eql(pm.environment.get(\"administrationRoute\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with amount\", function () {",
									"    pm.expect(response.amount).to.eql(JSON.stringify(pm.environment.get(\"amount\")));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with medicationID\", function () {",
									"    pm.expect(response.medication.medicationId).to.eql(pm.environment.get(\"medicationID\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with specialismInternalCode\", function () {",
									"    pm.expect(response.specialismInternalCode).to.eql(pm.environment.get(\"codeSpecialism\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with practitioner\", function () {",
									"    pm.expect(response.practitioner.id).to.eql(pm.environment.get(\"practitionerID\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with patientPrescriber\", function () {",
									"    pm.expect(response.patientPrescriber).to.eql(pm.environment.get(\"patientPrescriber\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with interval\", function () {",
									"    pm.expect(response.interval).to.eql(pm.environment.get(\"unitOfTime\"));",
									"});",
									"",
									"/*pm.test(\"Patient medication should be created with reasonForPrescribing\", function () {",
									"    pm.expect(response.reasonForPrescribing).to.eql(pm.environment.get(\"reasonForPrescribing\"));",
									"});",
									"////////*/",
									"",
									"pm.test(\"Patient medication should be created with note\", function () {",
									"    pm.expect(response.note.values[0]).to.eql(pm.environment.get(\"note\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with patientMedicationType\", function () {",
									"    pm.expect(response.patientMedicationType).to.eql(pm.environment.get(\"patientMedicationType\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with status\", function () {",
									"    pm.expect(response.status).to.eql(pm.environment.get(\"status\"));",
									"});",
									"",
									"// response time should be below 300ms",
									"pm.test(\"Response time is below 366\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(366);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"pm.environment.set(\"startDate\", moment().add(_.random(0, 60), 'days').format('YYYY-MM-DD'));",
									"",
									"pm.environment.set(\"amount\", _.random(1, 50));",
									"pm.environment.set(\"frequency\",_.random(1, 10));",
									"pm.environment.set(\"note\",pm.variables.replaceIn('{{$randomPhrase}}'));",
									"pm.environment.set(\"status\", \"APPROVED\");",
									"",
									"//const patientMedicationType = [\"OUTPATIENT\",\"CLINICAL\"];",
									"pm.environment.set(\"patientMedicationType\",\"OUTPATIENT\");",
									"",
									"if(pm.environment.get(\"practitionerID\"))",
									"{",
									"    pm.environment.set(\"patientPrescriber\",false);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"patientPrescriber\",true);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"prescriptionName\": \"{{medicationName}}\",\r\n  \"frequency\": \"{{frequency}}\",\r\n  \"unit\": \"{{medicationUnit}}\",\r\n  \"route\": \"{{administrationRoute}}\",\r\n  \"amount\": \"{{amount}}\",\r\n  \"interval\": \"{{unitOfTime}}\",\r\n  \"startDate\": \"{{startDate}}\",\r\n  \"note\": {\r\n    \"values\": [\r\n      \"{{note}}\"\r\n    ]\r\n  },\r\n  \"specialismInternalCode\": \"{{codeSpecialism}}\",\r\n  \"practitionerId\": \"{{practitionerID}}\",\r\n  \"medicationId\": \"{{medicationID}}\",\r\n  \"patientMedicationType\": \"{{patientMedicationType}}\",\r\n  \"status\": \"{{status}}\",\r\n  \"patientPrescriber\": \"{{patientPrescriber}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/patients/{{patientID}}/medications",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"patients",
								"{{patientID}}",
								"medications"
							]
						},
						"description": "Test request related to adding a patient medication"
					},
					"response": []
				},
				{
					"name": "Get Patient Medication by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\" Patient medication should be have prescriptionName\", function () {",
									"    pm.expect(response.prescriptionName).to.eql(pm.environment.get(\"medicationName\"));",
									"});",
									"",
									"pm.test(\"Patient medication should have startDate\", function () {",
									"    pm.expect(response.startDate).to.eql(pm.environment.get(\"startDate\"));",
									"});",
									"",
									"pm.test(\"Patient medication should have frequency\", function () {",
									"    pm.expect(response.frequency).to.eql(JSON.stringify(pm.environment.get(\"frequency\")));",
									"});",
									"",
									"pm.test(\"Patient medication should have unit\", function () {",
									"    pm.expect(response.unit).to.eql(pm.environment.get(\"medicationUnit\"));",
									"});",
									"",
									"pm.test(\"Patient medication should have administration route\", function () {",
									"    pm.expect(response.route).to.eql(pm.environment.get(\"administrationRoute\"));",
									"});",
									"",
									"pm.test(\"Patient medication should have amount\", function () {",
									"    pm.expect(response.amount).to.eql(JSON.stringify(pm.environment.get(\"amount\")));",
									"});",
									"",
									"pm.test(\"Patient medication should have patientID\", function () {",
									"    pm.expect(response.patientId).to.eql(pm.environment.get(\"patientID\"));",
									"});",
									"",
									"pm.test(\"Patient medication should have medicationID\", function () {",
									"    pm.expect(response.medication.medicationId).to.eql(pm.environment.get(\"medicationID\"));",
									"});",
									"",
									"pm.test(\"Patient medication should have specialismInternalCode\", function () {",
									"    pm.expect(response.specialismInternalCode).to.eql(pm.environment.get(\"codeSpecialism\"));",
									"});",
									"",
									"pm.test(\"Patient medication should have practitioner\", function () {",
									"    pm.expect(response.practitioner.id).to.eql(pm.environment.get(\"practitionerID\"));",
									"});",
									"",
									"pm.test(\"Patient medication should have patientPrescriber\", function () {",
									"    pm.expect(response.patientPrescriber).to.eql(pm.environment.get(\"patientPrescriber\"));",
									"});",
									"",
									"pm.test(\"Patient medication should have interval\", function () {",
									"    pm.expect(response.interval).to.eql(pm.environment.get(\"unitOfTime\"));",
									"});",
									"",
									"/*pm.test(\"Patient medication should have reasonForPrescribing\", function () {",
									"    pm.expect(response.reasonForPrescribing).to.eql(pm.environment.get(\"reasonForPrescribing\"));",
									"});*/",
									"",
									"pm.test(\"Patient medication should have note\", function () {",
									"    pm.expect(response.note.values[0]).to.eql(pm.environment.get(\"note\"));",
									"});",
									"",
									"pm.test(\"Patient medication should have patientMedicationType\", function () {",
									"    pm.expect(response.patientMedicationType).to.eql(pm.environment.get(\"patientMedicationType\"));",
									"});",
									"",
									"pm.test(\"Patient medication should have status\", function () {",
									"    pm.expect(response.status).to.eql(pm.environment.get(\"status\"));",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response is not null\"] = jsonData !== null;",
									"",
									"",
									"// response time should be below 300ms",
									"pm.test(\"Response time is below 267\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(267);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/patients/{{patientID}}/medications/{{patientMedicationID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"patients",
								"{{patientID}}",
								"medications",
								"{{patientMedicationID}}"
							]
						},
						"description": "Test request related to get a patient medication by ID"
					},
					"response": []
				},
				{
					"name": "Get a Practitioner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"\r",
									"let randomPractitioner=response.content[_.random(0,response.content.length-1)];\r",
									"pm.environment.set(\"practitionerID\", randomPractitioner.id);\r",
									"\r",
									"\r",
									"pm.test(\"Response time is below 201\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/practitioners-page?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"practitioners-page"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random practitioner for later purpose"
					},
					"response": []
				},
				{
					"name": "Get a Specialism",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Specialisms should have code\",function(){\r",
									"    response.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"code\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomSpecialism=response[_.random(0,response.length-1)]; //get random specialism \r",
									"pm.environment.set(\"codeSpecialism\", randomSpecialism.code);\r",
									"\r",
									"pm.test(\"Response time is below 110\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(110);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/specialisms",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"specialisms"
							]
						},
						"description": "Store new random specialism for updating a patient medication\r\n\r\n"
					},
					"response": []
				},
				{
					"name": "Get a List of Units of Time ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Units of time should have name\",function(){\r",
									"    response.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"name\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomUnitOfTime=response[_.random(0,response.length-1)]; \r",
									"pm.environment.set(\"unitOfTime\", randomUnitOfTime.name);\r",
									"\r",
									"pm.test(\"Response time is below 123\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(123);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/med/unit-of-time",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"unit-of-time"
							]
						}
					},
					"response": []
				},
				{
					"name": "(NT) Get a List of Reason for Prescribing (Authorization Validation)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"/*let response = pm.response.json();\r",
									"\r",
									"let randomReasonForPrescribing=response[_.random(0,response.length-1)]; \r",
									"pm.environment.set(\"reasonForPrescribing\", randomReasonForPrescribing);*/\r",
									"\r",
									"pm.test(\"Response time is below 89\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(89);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/med/reason-for-prescribing",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"reason-for-prescribing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Patient Medication by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\" Patient medication should be updated with prescriptionName\", function () {",
									"    pm.expect(response.prescriptionName).to.eql(pm.environment.get(\"medicationName\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with startDate\", function () {",
									"    pm.expect(response.startDate).to.eql(pm.environment.get(\"startDate\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with frequency\", function () {",
									"    pm.expect(response.frequency).to.eql(JSON.stringify(pm.environment.get(\"frequency\")));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with unit\", function () {",
									"    pm.expect(response.unit).to.eql(pm.environment.get(\"medicationUnit\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with administration route\", function () {",
									"    pm.expect(response.route).to.eql(pm.environment.get(\"administrationRoute\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with amount\", function () {",
									"    pm.expect(response.amount).to.eql(JSON.stringify(pm.environment.get(\"amount\")));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with medicationID\", function () {",
									"    pm.expect(response.medication.medicationId).to.eql(pm.environment.get(\"medicationID\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with specialismInternalCode\", function () {",
									"    pm.expect(response.specialismInternalCode).to.eql(pm.environment.get(\"codeSpecialism\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with practitioner\", function () {",
									"    pm.expect(response.practitioner.id).to.eql(pm.environment.get(\"practitionerID\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with patientPrescriber\", function () {",
									"    pm.expect(response.patientPrescriber).to.eql(pm.environment.get(\"patientPrescriber\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with interval\", function () {",
									"    pm.expect(response.interval).to.eql(pm.environment.get(\"unitOfTime\"));",
									"});",
									"",
									"/*pm.test(\"Patient medication should be updated with reasonForPrescribing\", function () {",
									"    pm.expect(response.reasonForPrescribing).to.eql(pm.environment.get(\"reasonForPrescribing\"));",
									"});*/",
									"",
									"pm.test(\"Patient medication should be updated with note\", function () {",
									"    pm.expect(response.note.values[0]).to.eql(pm.environment.get(\"note\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with patientMedicationType\", function () {",
									"    pm.expect(response.patientMedicationType).to.eql(pm.environment.get(\"patientMedicationType\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with status\", function () {",
									"    pm.expect(response.status).to.eql(pm.environment.get(\"status\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with endDate\", function () {",
									"    pm.expect(response.endDate).to.eql(pm.environment.get(\"endDate\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with reasonStop\", function () {",
									"    pm.expect(response.reasonStop).to.eql(pm.environment.get(\"reasonStop\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be updated with freeReasonStop\", function () {",
									"    if(pm.environment.get(\"reasonStop\")==\"OTHER\"){",
									"        pm.expect(response.freeReasonStop).to.eql(pm.environment.get(\"freeReasonStop\"));",
									"    }",
									"    else pm.expect(1).to.eql(1);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response is not null\"] = jsonData !== null;",
									"",
									"// response time should be below 400ms",
									"pm.test(\"Response time is below 352\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(352);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"pm.environment.set(\"startDate\", moment().add(_.random(0, 60), 'days').format('YYYY-MM-DD'));",
									"pm.environment.set(\"endDate\", moment().add(_.random(61, 90), 'days').format('YYYY-MM-DD'));",
									"",
									"pm.environment.set(\"amount\", _.random(1, 50));",
									"pm.environment.set(\"frequency\",_.random(1, 10));",
									"",
									"pm.environment.set(\"note\",pm.variables.replaceIn('{{$randomPhrase}}'));",
									"pm.environment.set(\"status\", \"APPROVED\");",
									"",
									"//const patientMedicationType = [\"OUTPATIENT\",\"CLINICAL\"];",
									"pm.environment.set(\"patientMedicationType\",\"OUTPATIENT\");",
									"",
									"if(pm.environment.get(\"practitionerID\"))",
									"{",
									"    pm.environment.set(\"patientPrescriber\",false);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"patientPrescriber\",true);",
									"}",
									"let rs=[ \"HYPERSENSITIVITY\", \"TOO_STRONG_EFFECT\", \"RESUME_PREVIOUS_PRESCRIBER_POLICY\", \"HOSPITAL_ADMISSION\", \"PLANNED_PROCEDURE\", \"CONTRAINDICATION\", \"INTERACTION\", \"ADJUSTMENT_METHOD_OF_ADMINISTRATION\", \"INDICATION_EXPIRED\", \"NO_OR_INSUFFICIENT_EFFECT\", \"DIFFERENT_PRESCRIBING_POLICY\", \"WISH_PATIENT\", \"OTHER\" ];",
									"pm.environment.set(\"reasonStop\",rs[_.random(0,12)]);",
									"if(pm.environment.get(\"reasonStop\")==\"OTHER\"){",
									"    pm.environment.set(\"freeReasonStop\",pm.variables.replaceIn('{{$randomPhrase}}'));",
									"}",
									"else{",
									"    pm.environment.set(\"freeReasonStop\",\"\");",
									"}",
									"",
									"const rules = [true,false];",
									"pm.environment.set(\"rules\",rules[_.random(0,1)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"prescriptionName\": \"{{medicationName}}\",\r\n  \"frequency\": \"{{frequency}}\",\r\n  \"unit\": \"{{medicationUnit}}\",\r\n  \"route\": \"{{administrationRoute}}\",\r\n  \"amount\": \"{{amount}}\",\r\n  \"interval\": \"{{unitOfTime}}\",\r\n  \"startDate\": \"{{startDate}}\",\r\n  \"note\": {\r\n    \"values\": [\r\n      \"{{note}}\"\r\n    ]\r\n  },\r\n  \"specialismInternalCode\": \"{{codeSpecialism}}\",\r\n  \"practitionerId\": \"{{practitionerID}}\",\r\n  \"medicationId\": \"{{medicationID}}\",\r\n  \"patientMedicationType\": \"{{patientMedicationType}}\",\r\n  \"status\": \"{{status}}\",\r\n  \"patientPrescriber\": \"{{patientPrescriber}}\",\r\n  \"endDate\": \"{{endDate}}\",\r\n  \"reasonStop\": \"{{reasonStop}}\",\r\n  \"freeReasonStop\": \"{{freeReasonStop}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/patients/{{patientID}}/medications/{{patientMedicationID}}?ignoreRules={{rules}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"patients",
								"{{patientID}}",
								"medications",
								"{{patientMedicationID}}"
							],
							"query": [
								{
									"key": "ignoreRules",
									"value": "{{rules}}"
								}
							]
						},
						"description": "Test request related to updating a patient medication"
					},
					"response": []
				},
				{
					"name": "Get ALL Patient Medications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"",
									"// validate that only one recors have medication id that is searched ",
									"pm.test('Has id', function () {",
									"    let has_name = false;",
									"    let counter = 0;",
									"    response.forEach(function (object) {",
									"        if (object.id === pm.environment.get(\"patientMedicationID\")) {",
									"            has_name = true;",
									"            counter++;",
									"        }",
									"    });",
									"    pm.expect((has_name) && (counter == 1)).to.eql(true);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response is not null\"] = jsonData !== null;",
									"",
									"// response time should be below 300ms",
									"pm.test(\"Response time is below 600\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/patients/{{patientID}}/medications",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"patients",
								"{{patientID}}",
								"medications"
							]
						},
						"description": "Get a list of medications that belong to a patient"
					},
					"response": []
				},
				{
					"name": "Delete Patient Medication by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Patient medication should be deleted\", function () {",
									"    pm.expect(response.deletedId).to.eql(pm.environment.get(\"patientMedicationID\"));",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response is not null\"] = jsonData !== null;",
									"",
									"// response time should be below 300ms",
									"pm.test(\"Response time is below 170\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(170);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"reason\",pm.variables.replaceIn('{{$randomPhrase}}'))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/patients/{{patientID}}/medications/{{patientMedicationID}}?reason={{reason}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"patients",
								"{{patientID}}",
								"medications",
								"{{patientMedicationID}}"
							],
							"query": [
								{
									"key": "reason",
									"value": "{{reason}}"
								}
							]
						},
						"description": "Test request related to deleting patient medication by ID"
					},
					"response": []
				},
				{
					"name": "Get ALL Patient Medications (patientMedicationID should not be present)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test('Has patientMedicationID', function () {",
									"    let has_code = false;",
									"    response.forEach(function (object) {",
									"        if (object.id === pm.environment.get(\"patientMedicationID\")) {",
									"            has_code = true;",
									"        }",
									"    });",
									"    pm.expect(has_code).to.eql(false);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response is not null\"] = jsonData !== null;",
									"",
									"// response time should be below 300ms",
									"pm.test(\"Response time is below 545\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(545);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/patients/{{patientID}}/medications",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"patients",
								"{{patientID}}",
								"medications"
							]
						},
						"description": "Validate that the previously deleted patient medication is no longer present"
					},
					"response": []
				},
				{
					"name": "Create Patient Medication with status UNAPPROVED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"pm.environment.set(\"patientMedicationUNAPPROVED\", response.id);",
									"",
									"pm.test(\" Patient medication should be created with prescriptionName\", function () {",
									"    pm.expect(response.prescriptionName).to.eql(pm.environment.get(\"medicationName\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with startDate\", function () {",
									"    pm.expect(response.startDate).to.eql(pm.environment.get(\"startDate\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with frequency\", function () {",
									"    pm.expect(response.frequency).to.eql(JSON.stringify(pm.environment.get(\"frequency\")));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with unit\", function () {",
									"    pm.expect(response.unit).to.eql(pm.environment.get(\"medicationUnit\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with administration route\", function () {",
									"    pm.expect(response.route).to.eql(pm.environment.get(\"administrationRoute\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with amount\", function () {",
									"    pm.expect(response.amount).to.eql(JSON.stringify(pm.environment.get(\"amount\")));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with patientID\", function () {",
									"    pm.expect(response.patientId).to.eql(pm.environment.get(\"patientID\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with medicationID\", function () {",
									"    pm.expect(response.medication.medicationId).to.eql(pm.environment.get(\"medicationID\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with specialismInternalCode\", function () {",
									"    pm.expect(response.specialismInternalCode).to.eql(pm.environment.get(\"codeSpecialism\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with practitioner\", function () {",
									"    pm.expect(response.practitioner.id).to.eql(pm.environment.get(\"practitionerID\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with patientPrescriber\", function () {",
									"    pm.expect(response.patientPrescriber).to.eql(pm.environment.get(\"patientPrescriber\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with interval\", function () {",
									"    pm.expect(response.interval).to.eql(pm.environment.get(\"unitOfTime\"));",
									"});",
									"",
									"/*pm.test(\"Patient medication should be created with reasonForPrescribing\", function () {",
									"    pm.expect(response.reasonForPrescribing).to.eql(pm.environment.get(\"reasonForPrescribing\"));",
									"});*/",
									"",
									"pm.test(\"Patient medication should be created with note\", function () {",
									"    pm.expect(response.note.values[0]).to.eql(pm.environment.get(\"note\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with patientMedicationType\", function () {",
									"    pm.expect(response.patientMedicationType).to.eql(pm.environment.get(\"patientMedicationType\"));",
									"});",
									"",
									"pm.test(\"Patient medication should be created with status\", function () {",
									"    pm.expect(response.status).to.eql(pm.environment.get(\"status\"));",
									"});",
									"",
									"// response time should be below 300ms",
									"pm.test(\"Response time is below 168\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(168);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"pm.environment.set(\"startDate\", moment().add(_.random(0, 60), 'days').format('YYYY-MM-DD'));",
									"",
									"pm.environment.set(\"amount\", _.random(1, 50));",
									"pm.environment.set(\"frequency\",_.random(1, 10));",
									"pm.environment.set(\"note\",pm.variables.replaceIn('{{$randomPhrase}}'));",
									"pm.environment.set(\"status\", \"UNAPPROVED\");",
									"",
									"//const patientMedicationType = [\"OUTPATIENT\",\"CLINICAL\"];",
									"pm.environment.set(\"patientMedicationType\",\"OUTPATIENT\");",
									"",
									"if(pm.environment.get(\"practitionerID\"))",
									"{",
									"    pm.environment.set(\"patientPrescriber\",false);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"patientPrescriber\",true);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"prescriptionName\": \"{{medicationName}}\",\r\n  \"frequency\": \"{{frequency}}\",\r\n  \"unit\": \"{{medicationUnit}}\",\r\n  \"route\": \"{{administrationRoute}}\",\r\n  \"amount\": \"{{amount}}\",\r\n  \"interval\": \"{{unitOfTime}}\",\r\n  \"startDate\": \"{{startDate}}\",\r\n  \"note\": {\r\n    \"values\": [\r\n      \"{{note}}\"\r\n    ]\r\n  },\r\n  \"specialismInternalCode\": \"{{codeSpecialism}}\",\r\n  \"patientId\": \"{{patientID}}\",\r\n  \"practitionerId\": \"{{practitionerID}}\",\r\n  \"medicationId\": \"{{medicationID}}\",\r\n  \"patientMedicationType\": \"{{patientMedicationType}}\",\r\n  \"status\": \"{{status}}\",\r\n  \"patientPrescriber\": \"{{patientPrescriber}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/patients/{{patientID}}/medications",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"patients",
								"{{patientID}}",
								"medications"
							]
						},
						"description": "Test request related to adding a patient medication"
					},
					"response": []
				},
				{
					"name": "Approve or Reject Patient Medication",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const status = [\"APPROVED\",\"REJECTED\"];\r",
									"pm.environment.set(\"status\",status[_.random(0,1)]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 209\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(209);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{patientMedicationUNAPPROVED}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/patients/{{patientID}}/medications/approval?status={{status}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"patients",
								"{{patientID}}",
								"medications",
								"approval"
							],
							"query": [
								{
									"key": "status",
									"value": "{{status}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Patient 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Patients should have ID\",function(){",
									"    response.content.forEach(function(content){",
									"        pm.expect(content).to.haveOwnProperty(\"id\");",
									"    });",
									"});",
									"",
									"let randomPatient=response.content[_.random(0,response.content.length-1)]; //get random patient ",
									"pm.environment.set(\"patientID\", randomPatient.id);",
									"",
									"pm.test(\"Response time is below 117\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(117);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/patients?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"patients"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random patient for later purpose"
					},
					"response": []
				},
				{
					"name": "Get a Medication 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"let randomMedication=response.content[_.random(0,response.content.length-1)];\r",
									"pm.environment.set(\"medicationID\",randomMedication.id);\r",
									"pm.environment.set(\"medicationName\", randomMedication.name);\r",
									"pm.environment.set(\"medicationUnit\",randomMedication.medicationUnits.units[0]);\r",
									"pm.environment.set(\"administrationRoute\",randomMedication.medicationAdministrationRoutes.administrationRoutes[0]);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 500ms\r",
									"pm.test(\"Response time is below 276\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(276);",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/med/medications?status=ACTIVE&page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"medications"
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random medication for later purpose"
					},
					"response": []
				},
				{
					"name": "Get a Practitioner 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"\r",
									"let randomPractitioner=response.content[_.random(0,response.content.length-1)];\r",
									"pm.environment.set(\"practitionerID\", randomPractitioner.id);\r",
									"\r",
									"pm.test(\"Response time is below 195\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(195);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/practitioners-page?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"practitioners-page"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random practitioner for later purpose"
					},
					"response": []
				},
				{
					"name": "Get a Specialism 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Specialisms should have code\",function(){\r",
									"    response.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"code\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomSpecialism=response[_.random(0,response.length-1)]; //get random specialism \r",
									"pm.environment.set(\"codeSpecialism\", randomSpecialism.code);\r",
									"\r",
									"pm.test(\"Response time is below 105\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(105);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/specialisms",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"specialisms"
							]
						},
						"description": "Store random specialism for later purpose"
					},
					"response": []
				},
				{
					"name": "(NT) Get a List of Reason for Prescribing 2 (Authorization Validation)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"/*let response = pm.response.json();\r",
									"\r",
									"let randomReasonForPrescribing=response[_.random(0,response.length-1)]; \r",
									"pm.environment.set(\"reasonForPrescribing\", randomReasonForPrescribing);*/\r",
									"\r",
									"pm.test(\"Response time is below 80\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(80);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/med/reason-for-prescribing",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"reason-for-prescribing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a List of Units of Time 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Units of time should have name\",function(){\r",
									"    response.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"name\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomUnitOfTime=response[_.random(0,response.length-1)]; \r",
									"pm.environment.set(\"unitOfTime\", randomUnitOfTime.name);\r",
									"\r",
									"pm.test(\"Response time is below 101\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(101);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/med/unit-of-time",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"unit-of-time"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Patient Medication Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"pm.environment.set(\"patientMedicationBatchID\", response[0].id);",
									"",
									"pm.test(\"Patient medication batch should be created with prescriptionName\", function () {",
									"    pm.expect(response[0].prescriptionName).to.eql(pm.environment.get(\"medicationName\"));",
									"});",
									"",
									"pm.test(\"Patient medication batch should be created with startDate\", function () {",
									"    pm.expect(response[0].startDate).to.eql(pm.environment.get(\"startDate\"));",
									"});",
									"",
									"pm.test(\"Patient medication batch should be created with frequency\", function () {",
									"    pm.expect(response[0].frequency).to.eql(JSON.stringify(pm.environment.get(\"frequency\")));",
									"});",
									"",
									"pm.test(\"Patient medication batch should be created with unit\", function () {",
									"    pm.expect(response[0].unit).to.eql(pm.environment.get(\"medicationUnit\"));",
									"});",
									"",
									"pm.test(\"Patient medication batch should be created with administration route\", function () {",
									"    pm.expect(response[0].route).to.eql(pm.environment.get(\"administrationRoute\"));",
									"});",
									"",
									"pm.test(\"Patient medication batch should be created with amount\", function () {",
									"    pm.expect(response[0].amount).to.eql(JSON.stringify(pm.environment.get(\"amount\")));",
									"});",
									"",
									"pm.test(\"Patient medication batch should be created with medicationID\", function () {",
									"    pm.expect(response[0].medication.medicationId).to.eql(pm.environment.get(\"medicationID\"));",
									"});",
									"",
									"pm.test(\"Patient medication batch should be created with specialismInternalCode\", function () {",
									"    pm.expect(response[0].specialismInternalCode).to.eql(pm.environment.get(\"codeSpecialism\"));",
									"});",
									"",
									"pm.test(\"Patient medication batch should be created with practitioner\", function () {",
									"    pm.expect(response[0].practitioner.id).to.eql(pm.environment.get(\"practitionerID\"));",
									"});",
									"",
									"pm.test(\"Patient medication batch should be created with patientPrescriber\", function () {",
									"    pm.expect(response[0].patientPrescriber).to.eql(pm.environment.get(\"patientPrescriber\"));",
									"});",
									"",
									"pm.test(\"Patient medication batch should be created with interval\", function () {",
									"    pm.expect(response[0].interval).to.eql(pm.environment.get(\"unitOfTime\"));",
									"});",
									"",
									"/*pm.test(\"Patient medication batch should be created with reasonForPrescribing\", function () {",
									"    pm.expect(response[0].reasonForPrescribing).to.eql(pm.environment.get(\"reasonForPrescribing\"));",
									"});*/",
									"",
									"pm.test(\"Patient medication batch should be created with note\", function () {",
									"    pm.expect(response[0].note.values[0]).to.eql(pm.environment.get(\"note\"));",
									"});",
									"",
									"pm.test(\"Patient medication batch should be created with patientMedicationType\", function () {",
									"    pm.expect(response[0].patientMedicationType).to.eql(pm.environment.get(\"patientMedicationType\"));",
									"});",
									"",
									"pm.test(\"Patient medication batch should be created with status\", function () {",
									"    pm.expect(response[0].status).to.eql(pm.environment.get(\"status\"));",
									"});",
									"",
									"// response time should be below 300ms",
									"pm.test(\"Response time is below 225\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(225);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"pm.environment.set(\"startDate\", moment().add(_.random(0, 60), 'days').format('YYYY-MM-DD'));",
									"",
									"pm.environment.set(\"amount\", _.random(1, 50));",
									"pm.environment.set(\"frequency\",_.random(1, 10));",
									"pm.environment.set(\"note\",pm.variables.replaceIn('{{$randomPhrase}}'));",
									"pm.environment.set(\"status\", \"APPROVED\");",
									"",
									"//const patientMedicationType = [\"OUTPATIENT\",\"CLINICAL\"];",
									"pm.environment.set(\"patientMedicationType\",\"OUTPATIENT\");",
									"",
									"if(pm.environment.get(\"practitionerID\"))",
									"{",
									"    pm.environment.set(\"patientPrescriber\",false);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"patientPrescriber\",true);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n  \"prescriptionName\": \"{{medicationName}}\",\r\n  \"frequency\": \"{{frequency}}\",\r\n  \"unit\": \"{{medicationUnit}}\",\r\n  \"route\": \"{{administrationRoute}}\",\r\n  \"amount\": \"{{amount}}\",\r\n  \"interval\": \"{{unitOfTime}}\",\r\n  \"startDate\": \"{{startDate}}\",\r\n  \"note\": {\r\n    \"values\": [\r\n      \"{{note}}\"\r\n    ]\r\n  },\r\n  \"specialismInternalCode\": \"{{codeSpecialism}}\",\r\n  \"practitionerId\": \"{{practitionerID}}\",\r\n  \"medicationId\": \"{{medicationID}}\",\r\n  \"patientMedicationType\": \"{{patientMedicationType}}\",\r\n  \"status\": \"{{status}}\",\r\n  \"patientPrescriber\": \"{{patientPrescriber}}\"\r\n}\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/patients/{{patientID}}/batch-medications",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"patients",
								"{{patientID}}",
								"batch-medications"
							]
						},
						"description": "Test request related to adding a patient medication"
					},
					"response": []
				},
				{
					"name": "Delete Patient Medication Batch by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Patient medication batch should be deleted\", function () {",
									"    pm.expect(response.deletedId).to.eql(pm.environment.get(\"patientMedicationBatchID\"));",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response is not null\"] = jsonData !== null;",
									"",
									"// response time should be below 300ms",
									"pm.test(\"Response time is below 190\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(190);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"reason\",pm.variables.replaceIn('{{$randomPhrase}}'))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/patients/{{patientID}}/medications/{{patientMedicationBatchID}}?reason={{reason}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"patients",
								"{{patientID}}",
								"medications",
								"{{patientMedicationBatchID}}"
							],
							"query": [
								{
									"key": "reason",
									"value": "{{reason}}"
								}
							]
						},
						"description": "Test request related to deleting patient medication by ID"
					},
					"response": []
				},
				{
					"name": "Get ALL Patient Medications (patientMedicationIBatchD should not be present) 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test('Has patientMedicationID', function () {",
									"    let has_code = false;",
									"    response.forEach(function (object) {",
									"        if (object.id === pm.environment.get(\"patientMedicationBatchID\")) {",
									"            has_code = true;",
									"        }",
									"    });",
									"    pm.expect(has_code).to.eql(false);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response is not null\"] = jsonData !== null;",
									"",
									"// response time should be below 300ms",
									"pm.test(\"Response time is below 395\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(395);",
									"});",
									"",
									"pm.environment.unset(\"patientID\");",
									"pm.environment.unset(\"patientMedicationID\");",
									"pm.environment.unset(\"reason\");",
									"pm.environment.unset(\"medicationID\");",
									"pm.environment.unset(\"medicationName\");",
									"pm.environment.unset(\"codeSpecialism\");",
									"pm.environment.unset(\"practitionerID\");",
									"pm.environment.unset(\"medicationUnit\");",
									"pm.environment.unset(\"administrationRoute\");",
									"pm.environment.unset(\"startDate\");",
									"pm.environment.unset(\"endDate\");",
									"pm.environment.unset(\"frequency\");",
									"pm.environment.unset(\"unitOfTime\");",
									"pm.environment.unset(\"patientPrescriber\");",
									"pm.environment.unset(\"rules\");",
									"pm.environment.unset(\"amount\");",
									"pm.environment.unset(\"note\");",
									"pm.environment.unset(\"reasonForPrescribing\");",
									"pm.environment.unset(\"reasonStop\");",
									"pm.environment.unset(\"patientMedicationType\");",
									"pm.environment.unset(\"status\");",
									"pm.environment.unset(\"patientMedicationUNAPPROVED\");",
									"pm.environment.unset(\"page\");",
									"pm.environment.unset(\"size\");",
									"pm.environment.unset(\"freeReasonStop\");",
									"pm.environment.unset(\"organizationType\");",
									"pm.environment.unset(\"patientMedicationBatchID\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/med/patients/{{patientID}}/medications",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"med",
								"patients",
								"{{patientID}}",
								"medications"
							]
						},
						"description": "Validate that the previously deleted patient medication is no longer present"
					},
					"response": []
				}
			],
			"description": "Test requests regarding patient medication and reason for prescribing",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Patient Order Item",
			"item": [
				{
					"name": "Get a Patient ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"pm.test(\"Patients should have ID\",function(){",
									"    response.content.forEach(function(content){",
									"        pm.expect(content).to.haveOwnProperty(\"id\");",
									"    });",
									"});",
									"",
									"let randomPatient=response.content[_.random(0,response.content.length-1)]; //get random patient ",
									"pm.environment.set(\"patientID\", randomPatient.id);",
									"",
									"pm.test(\"Response time is below 114\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(114);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/patients?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"patients"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random patient"
					},
					"response": []
				},
				{
					"name": "Get a Practitioner ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Practioners should have id\",function(){\r",
									"    response.content.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomPractitioner=response.content[_.random(0,response.content.length-1)]; //get random practitioner \r",
									"pm.environment.set(\"practitionerID\", randomPractitioner.id);\r",
									"\r",
									"pm.test(\"Response time is below 306\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(306);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));",
									"pm.environment.set(\"size\",_.random(10,15));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/practitioners-page?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"practitioners-page"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random practitioner for later purpose"
					},
					"response": []
				},
				{
					"name": "Get an Order Observation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Packages should have id\",function(){\r",
									"    response.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomOrderObservation=response[_.random(0,response.length-1)]; //get random order observation\r",
									"pm.environment.set(\"orderObservationId\", randomOrderObservation.id);\r",
									"pm.environment.set(\"orderType\", randomOrderObservation.orderType);\r",
									"\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 155\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(155);",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/ord/order-observations",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"ord",
								"order-observations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Patient Order Item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// random expiry date\r",
									"const moment = (require('moment'));\r",
									"pm.environment.set(\"startDate\", moment().add(_.random(-100, 30), 'days').format('YYYY-MM-DDTMM:mm:ss.SSS')+ \"Z\");\r",
									"\r",
									"pm.environment.set(\"value\", _.random(1,1000));\r",
									"pm.environment.set(\"orderItemResultsValue\", _.random(1,1000));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"pm.environment.set(\"patientOrderItemID\",response[0].id);\r",
									"\r",
									"pm.test(\"Patient order item should be created with value\", function(){\r",
									"    pm.expect(response[0].value).to.eql(JSON.stringify(pm.environment.get(\"value\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient order item should be created with order observation results - value\", function(){\r",
									"    pm.expect(response[0].orderItemResults[0].value).to.eql(JSON.stringify(pm.environment.get(\"orderItemResultsValue\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Pateint order item should be created with requester\", function(){\r",
									"    pm.expect(response[0].requester.id).to.eql(pm.environment.get(\"practitionerID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient order item should be created with order observation\", function(){\r",
									"    pm.expect(response[0].orderObservation.id).to.eql(pm.environment.get(\"orderObservationId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient order item should be created with order type\",function(){\r",
									"    pm.expect(response[0].orderType).to.eql(pm.environment.get(\"orderType\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient  order item should be created with date\",function(){\r",
									"    pm.expect(response[0].startDate).to.eql(pm.environment.get(\"startDate\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 228\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(228);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"observationItems\": [\r\n    {\r\n      \"orderObservationId\": \"{{orderObservationId}}\",\r\n      \"orderItemResults\": [\r\n        {\r\n          \"value\": \"{{orderItemResultsValue}}\"\r\n        }\r\n      ],\r\n      \"value\": \"{{value}}\"\r\n    }\r\n  ],\r\n  \"orderType\": \"{{orderType}}\",\r\n  \"requesterId\": \"{{practitionerID}}\",\r\n  \"startDate\": \"{{startDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/ord/patients/{{patientID}}/order-items",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"ord",
								"patients",
								"{{patientID}}",
								"order-items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Patient Order Item by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Patient order item should have ID\", function(){\r",
									"    pm.expect(response.id).to.eql(pm.environment.get(\"patientOrderItemID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient order item should have value\", function(){\r",
									"    pm.expect(response.value).to.eql(JSON.stringify(pm.environment.get(\"value\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient order item should have order observation results - value\", function(){\r",
									"    pm.expect(response.orderItemResults[0].value).to.eql(JSON.stringify(pm.environment.get(\"orderItemResultsValue\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Pateint order item should have requester\", function(){\r",
									"    pm.expect(response.requester.id).to.eql(pm.environment.get(\"practitionerID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient order item should have order observation\", function(){\r",
									"    pm.expect(response.orderObservation.id).to.eql(pm.environment.get(\"orderObservationId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient order item should have order type\",function(){\r",
									"    pm.expect(response.orderType).to.eql(pm.environment.get(\"orderType\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Patient  order item should have date\",function(){\r",
									"    pm.expect(response.startDate).to.eql(pm.environment.get(\"startDate\"));\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"pm.test(\"Response time is below 154\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(154);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/ord/patients/{{patientID}}/order-items/{{patientOrderItemID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"ord",
								"patients",
								"{{patientID}}",
								"order-items",
								"{{patientOrderItemID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List of Available Patient Order Items",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"numRecordsPerPage\",_.random(1,20));\r",
									"pm.environment.set(\"numPages\",_.random(1,20));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test('Has ID', function() {\r",
									"    let has_code = false;\r",
									"    let counter = 0;\r",
									"    response.content.forEach(function(object){\r",
									"      if(object.id === pm.environment.get(\"patientOrderItemID\")) {\r",
									"         has_code = true;\r",
									"         counter++;\r",
									"      }\r",
									"  });\r",
									"    pm.expect((has_code) && (counter == 1) ).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 168\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(168);",
									"});\r",
									"\r",
									"pm.environment.unset(\"patientID\");\r",
									"pm.environment.unset(\"patientOrderItemID\");\r",
									"pm.environment.unset(\"value\");\r",
									"pm.environment.unset(\"orderObservationId\");\r",
									"pm.environment.unset(\"orderType\");\r",
									"pm.environment.unset(\"startDate\");\r",
									"pm.environment.unset(\"numPages\");\r",
									"pm.environment.unset(\"numRecordsPerPage\");\r",
									"pm.environment.unset(\"practitionerID\");\r",
									"pm.environment.unset(\"orderItemResultsValue\");\r",
									"pm.environment.unset(\"page\");\r",
									"pm.environment.unset(\"size\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/ord/patients/{{patientID}}/order-items",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"ord",
								"patients",
								"{{patientID}}",
								"order-items"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Schediule Appointment Manually to Done",
			"item": [
				{
					"name": "Get a Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));\r",
									"pm.environment.set(\"size\",_.random(10,15));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Patients should have ID\", function () {\r",
									"    response.content.forEach(function (content) {\r",
									"        pm.expect(content).to.haveOwnProperty(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomPatient = response.content[_.random(0, response.content.length - 1)]; //get random patient \r",
									"pm.environment.set(\"patientID\", randomPatient.id);\r",
									"\r",
									"pm.test(\"Response time is below 142\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(142);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/patients?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"patients"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an Appointment Type (Appointment Manual)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Appointment types should have ID\", function () {\r",
									"    response.content.forEach(function (content) {\r",
									"        pm.expect(content).to.haveOwnProperty(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomAppointment = response.content[_.random(0, response.content.length - 1)]; //get random appointmentType \r",
									"pm.environment.set(\"appointmentTypeID\", randomAppointment.id);\r",
									"pm.environment.set(\"departmentID\", randomAppointment.departments[0].id)\r",
									"pm.environment.set(\"examTypeNumber\", randomAppointment.appointmentTypeContent.length); // is used in get examType\r",
									"\r",
									"let examinationTypeList = [];\r",
									"for (i = 0; i < randomAppointment.appointmentTypeContent.length; i++) {\r",
									"    let examinationTypeModified= {\r",
									"        \"duration\": randomAppointment.appointmentTypeContent[i].examinationType.defaultDuration,\r",
									"        \"examinationTypeId\": randomAppointment.appointmentTypeContent[i].examinationType.id,\r",
									"        \"resourceType\": randomAppointment.appointmentTypeContent[i].examinationType.resourceType\r",
									"    }\r",
									"    examinationTypeList.push(examinationTypeModified);\r",
									"}\r",
									"pm.environment.set(\"examinationTypeList\",JSON.stringify(examinationTypeList))\r",
									"console.log(JSON.stringify(examinationTypeList))\r",
									"\r",
									"// let elementNumbers = [];\r",
									"// elementNumbers = randomAppointment.appointmentTypeContent.forEach((e) => {\r",
									"//     elementNumbers.push(\r",
									"//         {\r",
									"//             \"duration\": e.defaultDuration,\r",
									"//             \"examinationTypeId\": e.id,\r",
									"//             \"resourceType\": e.resourceType,\r",
									"//             \"agendaId\": \"string\",\r",
									"//             \"roomId\": \"string\"\r",
									"//         }\r",
									"//     );\r",
									"// });\r",
									"// pm.environment.set(\"assignmentsBody\", elementNumbers);\r",
									"\r",
									"\r",
									"\r",
									"// let examinationTypeID = randomAppointment.appointmentTypeContent.examinationType.id;\r",
									"// pm.environment.set(\"examinationTypeID\", examinationTypeID);\r",
									"\r",
									"\r",
									"pm.test(\"Response time is below 421\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(421);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/agenda/appointment-types",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"agenda",
								"appointment-types"
							]
						},
						"description": "Store random appointment type for later purpose"
					},
					"response": []
				},
				{
					"name": "Get Agendas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"",
									"const examTypeNumber = pm.environment.get(\"examTypeNumber\");",
									"",
									"let assignmentsBodyList = [];",
									"let examTypeList = JSON.parse(pm.environment.get(\"examinationTypeList\"));",
									"let flag = 0;",
									"for (let i = 0; i <= response.content.length - 1; i++) {",
									"    let randomAgenda = response.content[_.random(0, response.content.length - 1)];",
									"    if (flag == 0) {",
									"        for (j = 0; j < examTypeNumber; j++) {",
									"            if (randomAgenda.resourceType == examTypeList[j].resourceType && randomAgenda.expired == false && randomAgenda.status == \"ACTIVE\") {",
									"",
									"                let assignmentsBody =",
									"                {",
									"                    \"duration\": examTypeList[j].duration,",
									"                    \"examinationTypeId\": examTypeList[j].examinationTypeId,",
									"                    \"resourceType\": examTypeList[j].resourceType,",
									"                    \"agendaId\": randomAgenda.id,",
									"                    \"roomId\": null",
									"                }",
									"",
									"                assignmentsBodyList.push(assignmentsBody);",
									"",
									"                if (assignmentsBodyList.length == examTypeNumber) {",
									"                    flag = 1;",
									"                    break;",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"if (assignmentsBodyList.length == 0) {",
									"    postman.setNextRequest(\"Get an Appointment Type (Appointment Manual)\");",
									"}",
									"",
									"pm.environment.set(\"assignmentsBodyList\", JSON.stringify(assignmentsBodyList));",
									"console.log(JSON.stringify(assignmentsBodyList));",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"tests[\"Response is not null\"] = jsonData !== null;",
									"",
									"// response time should be below 400ms",
									"pm.test(\"Response time is below 779\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(779);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/agenda/agendas?department.id={{departmentID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"agenda",
								"agendas"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "2000",
									"disabled": true
								},
								{
									"key": "department.id",
									"value": "{{departmentID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Schedule an appointment (manual)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const moment = require('moment');\r",
									"pm.environment.set(\"appointmentID\", response.id);\r",
									"\r",
									"\r",
									"pm.test(\"Appointment is created with startDate\", () => {\r",
									"    pm.expect(response.startDate).to.eql(pm.environment.get(\"startDate\"));\r",
									"});\r",
									"\r",
									"let appointmentDuration = 0;\r",
									"response.examinations.forEach((e) => {\r",
									"    appointmentDuration += e.duration;\r",
									"});\r",
									"let calculatedEndDate = moment(response.startDate).add(appointmentDuration, 'minutes').format('YYYY-MM-DDTMM:mm:ss.SSS') + \"Z\";\r",
									"// pm.environment.set(\"appointmentDuration\", appointmentDuration);  // possibly redundat\r",
									"\r",
									"pm.test(\"Appointment is created with endDate\", () => {\r",
									"    pm.expect(response.endDate).to.eql(calculatedEndDate);\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment is created with Deparment\", () => {\r",
									"    pm.expect(response.department.id).to.eql(pm.environment.get(\"departmentID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment is created with PatientID\", () => {\r",
									"    pm.expect(response.patientId).to.eql(pm.environment.get(\"patientID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment is created with AppointmentType\", () => {\r",
									"    pm.expect(response.appointmentType.id).to.eql(pm.environment.get(\"appointmentTypeID\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set(\"startDate\", moment().add(_.random(0, 21), 'days').format('YYYY-MM-DDTMM:mm:ss.SSS') + \"Z\");\r",
									"\r",
									"const referrerTypeList = [\"UNKNOWN\", \"PATIENT\", \"PRACTITIONER\", \"ORGANIZATION\"];\r",
									"pm.environment.set(\"referrerType\", \"UNKNOWN\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assignments\": {{assignmentsBodyList}},\r\n    \"appointmentNotificationReceivers\": [\r\n        {\r\n            \"receiverId\": \"{{patientID}}\",\r\n            \"reminderBySms\": false,\r\n            \"receiverType\": \"PATIENT\",\r\n            \"confirmationByEmail\": false,\r\n            \"reminderByEmail\": false\r\n        }\r\n    ],\r\n    \"patientId\": \"{{patientID}}\",\r\n    \"departmentId\": \"{{departmentID}}\",\r\n    \"appointmentTypeId\": \"{{appointmentTypeID}}\",\r\n    \"creationFlow\": \"DEFAULT\",\r\n    \"draftOverwrite\": false,\r\n    \"creationFlowReferenceId\": \"\",\r\n    \"referrerType\": \"{{referrerType}}\",\r\n    \"comment\": \"{{$randomBsNoun}}\",\r\n    \"startDate\": \"{{startDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/agenda/appointments/manual",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"agenda",
								"appointments",
								"manual"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get appointment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Appointment is created with endDate\", () => {\r",
									"    pm.expect(response.endDate).to.eql(pm.environment.get(\"appointmentDuration\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment is created with Deparment\", () => {\r",
									"    pm.expect(response.department.id).to.eql(pm.environment.get(\"departmentID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment is created with PatientID\", () => {\r",
									"    pm.expect(response.patientId).to.eql(pm.environment.get(\"patientID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment is created with AppointmentType\", () => {\r",
									"    pm.expect(response.appointmentType.id).to.eql(pm.environment.get(\"appointmentTypeID\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/agenda/patient/{{patientID}}/appointments/{{appointmentID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"agenda",
								"patient",
								"{{patientID}}",
								"appointments",
								"{{appointmentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Appointment comment added\", () => {\r",
									"    pm.expect(response.comment != null);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let appointmentReasonObject;\r",
									"\r",
									"// if (pm.environment.get(\"appointmentReasonID\") !== null) {\r",
									"//     appointmentReasonObject = {\r",
									"//         \"comment\": \"random comment\" + _.random(0, 13),\r",
									"//         \"changeReasonId\": pm.environment.get(\"appointmentReasonID\"),\r",
									"//         \"referenceId\": pm.environment.get(\"appointmentID\")\r",
									"//     }\r",
									"// } else {\r",
									"//     appointmentReasonObject == null;\r",
									"// }\r",
									"\r",
									"\r",
									"// pm.environment.set(\"appointmentReasonBody\", JSON.stringify(appointmentReasonObject));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"{{$randomWords}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/agenda/patient/{{patientID}}/appointments/{{appointmentID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"agenda",
								"patient",
								"{{patientID}}",
								"appointments",
								"{{appointmentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechedule an appointment (manual)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const moment = require('moment');\r",
									"pm.environment.set(\"appointmentID\", response.id);\r",
									"\r",
									"pm.environment.set(\"examinationCounter\", 0);\r",
									"pm.environment.set(\"examCountStopper\", 0);\r",
									"pm.environment.set(\"examinationLength\", response.examinations.length);\r",
									"pm.environment.set(\"endDate\", response.endDate);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Appointment is rescheduled with startDate\", () => {\r",
									"    pm.expect(response.startDate).to.eql(pm.environment.get(\"startDate\"));\r",
									"});\r",
									"\r",
									"let appointmentDuration = 0;\r",
									"response.examinations.forEach((e) => {\r",
									"    appointmentDuration += e.duration;\r",
									"});\r",
									"let calculatedEndDate = moment(response.startDate).add(appointmentDuration, 'minutes').format('YYYY-MM-DDTMM:mm:ss.SSS') + \"Z\";\r",
									"pm.test(\"Appointment is rescheduled with endDate\", () => {\r",
									"    pm.expect(response.endDate).to.eql(calculatedEndDate);\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment is rescheduled with Deparment\", () => {\r",
									"    pm.expect(response.department.id).to.eql(pm.environment.get(\"departmentID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment is rescheduled with PatientID\", () => {\r",
									"    pm.expect(response.patientId).to.eql(pm.environment.get(\"patientID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment is rescheduled with AppointmentType\", () => {\r",
									"    pm.expect(response.appointmentType.id).to.eql(pm.environment.get(\"appointmentTypeID\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set(\"startDate\", moment().add(_.random(0, 21), 'days').format('YYYY-MM-DDTMM:mm:ss.SSS') + \"Z\");\r",
									"\r",
									"const referrerTypeList = [\"UNKNOWN\", \"PATIENT\", \"PRACTITIONER\", \"ORGANIZATION\"];\r",
									"pm.environment.set(\"referrerType\", \"UNKNOWN\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assignments\": {{assignmentsBodyList}},\r\n    \"appointmentNotificationReceivers\": [\r\n        {\r\n            \"receiverId\": \"{{patientID}}\",\r\n            \"reminderBySms\": false,\r\n            \"receiverType\": \"PATIENT\",\r\n            \"confirmationByEmail\": false,\r\n            \"reminderByEmail\": false\r\n        }\r\n    ],\r\n    \"appointmentId\": \"{{appointmentID}}\",\r\n    \"departmentId\": \"{{departmentID}}\",\r\n    \"appointmentTypeId\": \"{{appointmentTypeID}}\",\r\n    \"creationFlow\": \"DEFAULT\",\r\n    \"draftOverwrite\": false,\r\n    \"creationFlowReferenceId\": \"\",\r\n    \"referrerType\": \"{{referrerType}}\",\r\n    \"comment\": \"{{$randomBsNoun}}\",\r\n    \"startDate\": \"{{startDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/agenda/appointments/{{appointmentID}}/reschedule/manual",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"agenda",
								"appointments",
								"{{appointmentID}}",
								"reschedule",
								"manual"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get appointment examinations by appointment id (Appointment Manual)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Appointment has endDate\", () => {\r",
									"    pm.expect(response.endDate).to.eql(pm.environment.get(\"endDate\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment has Deparment\", () => {\r",
									"    pm.expect(response.department.id).to.eql(pm.environment.get(\"departmentID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment has PatientID\", () => {\r",
									"    pm.expect(response.patientId).to.eql(pm.environment.get(\"patientID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment has AppointmentType\", () => {\r",
									"    pm.expect(response.appointmentType.id).to.eql(pm.environment.get(\"appointmentTypeID\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.set(\"examinationID\", response.examinations[pm.environment.get(\"examCountStopper\")].id);\r",
									"pm.environment.set(\"agendaID\", response.examinations[pm.environment.get(\"examCountStopper\")].agenda.id);\r",
									"\r",
									"if (response.examinations[pm.environment.get(\"examCountStopper\")].primaryExamination) {\r",
									"    pm.environment.set(\"hasWaitingRoom\", true);\r",
									"} else {\r",
									"    pm.environment.set(\"hasWaitingRoom\", false);\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/agenda/patient/{{patientID}}/appointments/{{appointmentID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"agenda",
								"patient",
								"{{patientID}}",
								"appointments",
								"{{appointmentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Examination to In Progress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Appointment status is In Progress\", () => {\r",
									"    pm.expect(response.appointment.status == \"IN_PROGRESS\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"hasWaitingRoom\": {{hasWaitingRoom}},\r\n    \"comment\": null,\r\n    \"agendaId\": \"{{agendaID}}\",\r\n    \"roomId\": null,\r\n    \"resourceType\": \"SPECIALIST\",\r\n    \"status\": \"IN_PROGRESS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/agenda/patient/{{patientID}}/examinations/{{examinationID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"agenda",
								"patient",
								"{{patientID}}",
								"examinations",
								"{{examinationID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Examination to Done",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const statusArr = [\"TO_DO\", \"IN_PROGRESS\", \"DONE\"];  // bez   TO_APPROVE, \"CANCELED\"\r",
									"\r",
									"if (pm.environment.get(\"examinationCounter\") == 1) {\r",
									"    pm.environment.set(\"examinationStatus\", \"IN_PROGRESS\")\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let stopperChange = pm.environment.get(\"examCountStopper\") + 1;\r",
									"pm.environment.set(\"examCountStopper\", stopperChange);\r",
									"\r",
									"if (pm.response.code == 200 && pm.environment.get(\"examinationLength\") !== pm.environment.get(\"examCountStopper\")) {\r",
									"\r",
									"    // let counterChange = pm.environment.get(\"examinationCounter\") + 1;\r",
									"    // pm.environment.set(\"examinationCounter\", counterChange);\r",
									"\r",
									"\r",
									"    pm.test(\"Appointment status is In Progress\", () => {\r",
									"        pm.expect(pm.response.json().appointment.status == \"IN_PROGRESS\")\r",
									"    });\r",
									"\r",
									"    postman.setNextRequest(\"Get appointment examinations by appointment id (Appointment Manual)\");\r",
									"\r",
									"} else {\r",
									"    pm.test(\"Appointment status is Done\", () => {\r",
									"        pm.expect(pm.response.json().appointment.status == \"DONE\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"hasWaitingRoom\": {{hasWaitingRoom}},\r\n    \"comment\": null,\r\n    \"agendaId\": \"{{agendaID}}\",\r\n    \"roomId\": null,\r\n    \"resourceType\": \"SPECIALIST\",\r\n    \"status\": \"DONE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/agenda/patient/{{patientID}}/examinations/{{examinationID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"agenda",
								"patient",
								"{{patientID}}",
								"examinations",
								"{{examinationID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Done appointment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Appointment is Done\", () => {\r",
									"    pm.expect(response.status).to.eql(\"DONE\");\r",
									"})\r",
									"\r",
									"pm.environment.unset(\"page\");\r",
									"pm.environment.unset(\"size\");\r",
									"pm.environment.unset(\"patientID\");\r",
									"pm.environment.unset(\"appointmentTypeID\");\r",
									"pm.environment.unset(\"departmentID\")\r",
									"pm.environment.unset(\"examTypeNumber\");\r",
									"pm.environment.unset(\"examinationTypeList\")\r",
									"pm.environment.unset(\"assignmentsBodyList\")\r",
									"pm.environment.unset(\"startDate\");\r",
									"pm.environment.unset(\"endDate\");\r",
									"pm.environment.unset(\"referrerType\");\r",
									"pm.environment.unset(\"appointmentDuration\");\r",
									"pm.environment.unset(\"appointmentID\");\r",
									"pm.environment.unset(\"examinationID\");\r",
									"pm.environment.unset(\"examinationCounter\");\r",
									"pm.environment.unset(\"examCountStopper\");\r",
									"pm.environment.unset(\"hasWaitingRoom\");\r",
									"pm.environment.unset(\"examinationLength\");\r",
									"pm.environment.unset(\"agendaID\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/agenda/patient/{{patientID}}/appointments/{{appointmentID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"agenda",
								"patient",
								"{{patientID}}",
								"appointments",
								"{{appointmentID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Letter",
			"item": [
				{
					"name": "Get an Appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Appointments should have id\",function(){\r",
									"    response.content.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomAppointment = response.content[_.random(0,response.content.length-1)];\r",
									"pm.environment.set(\"appointmentID\",randomAppointment.id);\r",
									"pm.environment.set(\"patientID\",randomAppointment.patientId);\r",
									"pm.environment.set(\"examinationID\",randomAppointment.examinations[0].id);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));\r",
									"pm.environment.set(\"size\",_.random(10,15));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/agenda/appointments?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"agenda",
								"appointments"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random appointment for later purpose"
					},
					"response": []
				},
				{
					"name": "Get a  Letter Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Letter Templates should have id\",function(){\r",
									"    response.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let template;\r",
									"for(i=0;i<response.length;i++)\r",
									"{\r",
									"    template = response[_.random(0,response.length-1)];\r",
									"    if(template.status == \"ACTIVE\")\r",
									"    {\r",
									"        pm.environment.set(\"letterTemplateID\",template.id);\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"pm.test(\"Response time is below 199\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(199);",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/let/letter-templates",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"let",
								"letter-templates"
							]
						},
						"description": "Stor random letter template for later purpose"
					},
					"response": []
				},
				{
					"name": "Get a Specialism ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Specialisms should have code\",function(){\r",
									"    response.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"code\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomSpecialism=response[_.random(0,response.length-1)]; //get random specialism \r",
									"pm.environment.set(\"codeSpecialism\", randomSpecialism.code);\r",
									"\r",
									"pm.test(\"Response time is below 161\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(161);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/specialisms",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"specialisms"
							]
						},
						"description": "Store random specialism for later purpose"
					},
					"response": []
				},
				{
					"name": "Get a Practitioner  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Practioners should have id\",function(){\r",
									"    response.content.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomPractitioner=response.content[_.random(0,response.content.length-1)]; //get random practitioner \r",
									"pm.environment.set(\"practitionerID\", randomPractitioner.id);\r",
									"\r",
									"let randomRecipientPractitioner=response.content[_.random(0,response.content.length-1)]; //get random recipient \r",
									"pm.environment.set(\"recipientPractitionerID\", randomRecipientPractitioner.id);\r",
									"\r",
									"pm.test(\"Response time is below 230\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(230);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));\r",
									"pm.environment.set(\"size\",_.random(10,15));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/practitioners/search/page?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"practitioners",
								"search",
								"page"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store random practitioner for later purpose"
					},
					"response": []
				},
				{
					"name": "Get a Letter Content Preview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Letter content preview should be created with appointment\", function(){\r",
									"    pm.expect(response.appointmentId).to.eql(pm.environment.get(\"appointmentID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter content preview should be created with examinations\", function(){\r",
									"    pm.expect(response.examinationIds[0]).to.eql(pm.environment.get(\"examinationID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter content preview should be created with letter template\", function(){\r",
									"    pm.expect(response.letterTemplateId).to.eql(pm.environment.get(\"letterTemplateID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 810\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(810);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"appointmentId\": \"{{appointmentID}}\",\r\n  \"examinationIds\": [\r\n    \"{{examinationID}}\"\r\n  ],\r\n  \"letterTemplateId\": \"{{letterTemplateID}}\",\r\n   \"orderBatchIds\": [\r\n  ],\r\n  \"patientMedicalNoteIds\": [\r\n\r\n   ],\r\n   \"specialismInternalCode\":\"{{codeSpecialism}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/let/patients/{{patientID}}/letters/letter-content-preview",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"let",
								"patients",
								"{{patientID}}",
								"letters",
								"letter-content-preview"
							]
						},
						"description": "Test request related to adding a Letter Content Preview"
					},
					"response": []
				},
				{
					"name": "Create a Letter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"status\",\"STATUS_CONCEPT\");\r",
									"pm.environment.set(\"subject\",pm.variables.replaceIn('{{$randomCatchPhrase}}'))\r",
									"pm.environment.set(\"content\",pm.variables.replaceIn('{{$randomPhrase}}'))\r",
									"\r",
									"const recipientType = [\"PATIENT\",\"PRACTITIONER\"];\r",
									"pm.environment.set(\"recipientType\", recipientType[_.random(0,1)]);\r",
									"\r",
									"if(pm.environment.get(\"recipientType\")==\"PATIENT\")\r",
									"{\r",
									"    pm.environment.set(\"toID\",pm.environment.get(\"patientID\"));\r",
									"}\r",
									"else\r",
									"{\r",
									"    pm.environment.set(\"toID\",pm.environment.get(\"recipientPractitionerID\"));\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"pm.environment.set(\"letterID\",response.id);\r",
									"//pm.environment.set(\"letterRecipientID\",response.letterRecipient.id);\r",
									"\r",
									"pm.test(\"Letter should be created with appointment\", function(){\r",
									"    pm.expect(response.appointmentId).to.eql(pm.environment.get(\"appointmentID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter should be created with letter template\", function(){\r",
									"    pm.expect(response.letterTemplateId).to.eql(pm.environment.get(\"letterTemplateID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter should be created with content\", function(){\r",
									"    pm.expect(response.content).to.eql(pm.environment.get(\"content\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter should be created with status\", function(){\r",
									"    pm.expect(response.status).to.eql(pm.environment.get(\"status\"));\r",
									"});\r",
									"\r",
									"/*pm.test(\"Letter should be created with recipient type\", function(){\r",
									"    pm.expect(response.letterRecipient.recipientType).to.eql(pm.environment.get(\"recipientType\"));\r",
									"});*/\r",
									"\r",
									"pm.test(\"Letter should be created with fromID\", function(){\r",
									"    pm.expect(response.from.id).to.eql(pm.environment.get(\"practitionerID\"));\r",
									"});\r",
									"\r",
									"/*if(pm.environment.get(\"recipientType\")==\"PRACTITIONER\")\r",
									"{\r",
									"    pm.test(\"Letter should be created with recipientType ID = practitioner\", function(){\r",
									"         pm.expect(response.letterRecipient.practitioner.id).to.eql(pm.environment.get(\"toID\"));\r",
									"    });\r",
									"}\r",
									"else\r",
									"{\r",
									"     pm.test(\"Letter should be created with recipientType ID = patient\", function(){\r",
									"         pm.expect(response.letterRecipient.patient.id).to.eql(pm.environment.get(\"toID\"));\r",
									"    });\r",
									"}*/\r",
									"\r",
									"pm.test(\"Letter should be created with subject\", function(){\r",
									"    pm.expect(response.subject).to.eql(pm.environment.get(\"subject\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter should be created with specialism\", function(){\r",
									"    pm.expect(response.specialismInternalCode).to.eql(pm.environment.get(\"codeSpecialism\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 448\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(448);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "content",
									"value": "{{content}}",
									"type": "text"
								},
								{
									"key": "status",
									"value": "{{status}}",
									"type": "text"
								},
								{
									"key": "letterTemplateId",
									"value": "{{letterTemplateID}}",
									"type": "text"
								},
								{
									"key": "fromId",
									"value": "{{practitionerID}}",
									"type": "text"
								},
								{
									"key": "recipientTypeId",
									"value": "{{toID}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recipientType",
									"value": "{{recipientType}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "subject",
									"value": "{{subject}}",
									"type": "text"
								},
								{
									"key": "appointmentId",
									"value": "{{appointmentID}}",
									"type": "text"
								},
								{
									"key": "examinationsUuid",
									"value": "{{examinationID}}",
									"type": "text"
								},
								{
									"key": "specialismInternalCode",
									"value": "{{codeSpecialism}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/mp/let/patients/{{patientID}}/letters",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"let",
								"patients",
								"{{patientID}}",
								"letters"
							]
						},
						"description": "Test request related to adding a Letter"
					},
					"response": []
				},
				{
					"name": "Get a Letter by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Letter should be have appointment\", function(){\r",
									"    pm.expect(response.appointmentId).to.eql(pm.environment.get(\"appointmentID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter should have template\", function(){\r",
									"    pm.expect(response.letterTemplateId).to.eql(pm.environment.get(\"letterTemplateID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter should have content\", function(){\r",
									"    pm.expect(response.content).to.eql(pm.environment.get(\"content\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter should have status\", function(){\r",
									"    pm.expect(response.status).to.eql(pm.environment.get(\"status\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter should have fromID\", function(){\r",
									"    pm.expect(response.from.id).to.eql(pm.environment.get(\"practitionerID\"));\r",
									"});\r",
									"\r",
									"/*pm.test(\"Letter should have recipient type\", function(){\r",
									"    pm.expect(response.letterRecipient.recipientType).to.eql(pm.environment.get(\"recipientType\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter should have recipient ID\", function(){\r",
									"    pm.expect(response.letterRecipient.id).to.eql(pm.environment.get(\"letterRecipientID\"));\r",
									"});\r",
									"\r",
									"if(pm.environment.get(\"recipientType\")==\"PRACTITIONER\")\r",
									"{\r",
									"    pm.test(\"Letter should have recipientType ID = practitioner\", function(){\r",
									"         pm.expect(response.letterRecipient.practitioner.id).to.eql(pm.environment.get(\"toID\"));\r",
									"    });\r",
									"}\r",
									"else\r",
									"{\r",
									"     pm.test(\"Letter should have recipientType ID = patient\", function(){\r",
									"         pm.expect(response.letterRecipient.patient.id).to.eql(pm.environment.get(\"toID\"));\r",
									"    });\r",
									"}*/\r",
									"\r",
									"pm.test(\"Letter should have subject\", function(){\r",
									"    pm.expect(response.subject).to.eql(pm.environment.get(\"subject\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter should have specialism\", function(){\r",
									"    pm.expect(response.specialismInternalCode).to.eql(pm.environment.get(\"codeSpecialism\"));\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"pm.test(\"Response time is below 400\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/let/patients/{{patientID}}/letters/{{letterID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"let",
								"patients",
								"{{patientID}}",
								"letters",
								"{{letterID}}"
							]
						},
						"description": "Test request related to get a letter by ID"
					},
					"response": []
				},
				{
					"name": "Get a Practitioner ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Practioners should have id\",function(){\r",
									"    response.content.forEach(function(object){\r",
									"        pm.expect(object).to.haveOwnProperty(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let randomPractitioner=response.content[_.random(0,response.content.length-1)]; //get random practitioner \r",
									"pm.environment.set(\"practitionerID\", randomPractitioner.id);\r",
									"\r",
									"let randomRecipientPractitioner=response.content[_.random(0,response.content.length-1)]; //get random recipient \r",
									"pm.environment.set(\"recipientPractitionerID\", randomRecipientPractitioner.id);\r",
									"\r",
									"pm.test(\"Response time is below 160\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(160);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\",_.random(0,2));\r",
									"pm.environment.set(\"size\",_.random(10,15));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/core/practitioners/search/page?page={{page}}&size={{size}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"core",
								"practitioners",
								"search",
								"page"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "size",
									"value": "{{size}}"
								}
							]
						},
						"description": "Store new random practitioner for updating a letter"
					},
					"response": []
				},
				{
					"name": "Update a Letter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"status\",\"STATUS_CONCEPT\");\r",
									"pm.environment.set(\"subject\",pm.variables.replaceIn('{{$randomCatchPhrase}}'));\r",
									"pm.environment.set(\"content\",pm.variables.replaceIn('{{$randomPhrase}}'));\r",
									"\r",
									"const recipientType = [\"PATIENT\",\"PRACTITIONER\"];\r",
									"pm.environment.set(\"recipientType\", recipientType[_.random(0,1)]);\r",
									"\r",
									"if(pm.environment.get(\"recipientType\")==\"PATIENT\")\r",
									"{\r",
									"    pm.environment.set(\"toID\",pm.environment.get(\"patientID\"));\r",
									"}\r",
									"else\r",
									"{\r",
									"    pm.environment.set(\"toID\",pm.environment.get(\"recipientPractitionerID\"));\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Letter should be updated with content\", function(){\r",
									"    pm.expect(response.content).to.eql(pm.environment.get(\"content\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Letter should be updated with status\", function(){\r",
									"    pm.expect(response.status).to.eql(pm.environment.get(\"status\"));\r",
									"});\r",
									"\r",
									"/*pm.test(\"Letter should be updated with recipient type\", function(){\r",
									"    pm.expect(response.letterRecipient.recipientType).to.eql(pm.environment.get(\"recipientType\"));\r",
									"});*/\r",
									"\r",
									"pm.test(\"Letter should be updated with fromID\", function(){\r",
									"    pm.expect(response.from.id).to.eql(pm.environment.get(\"practitionerID\"));\r",
									"});\r",
									"\r",
									"/*if(pm.environment.get(\"recipientType\")==\"PRACTITIONER\")\r",
									"{\r",
									"    pm.test(\"Letter should be updated with recipientType ID = practitioner\", function(){\r",
									"        pm.expect(response.letterRecipient.practitioner.id).to.eql(pm.environment.get(\"toID\"));\r",
									"    });\r",
									"}\r",
									"else\r",
									"{\r",
									"     pm.test(\"Letter should be updated with recipientType ID = patient\", function(){\r",
									"        pm.expect(response.letterRecipient.patient.id).to.eql(pm.environment.get(\"toID\"));\r",
									"    });\r",
									"}*/\r",
									"\r",
									"\r",
									"pm.test(\"Letter should be updated with subject\", function(){\r",
									"    pm.expect(response.subject).to.eql(pm.environment.get(\"subject\"));\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"pm.test(\"Response time is below 270\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(270);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fromId\": \"{{practitionerID}}\",  \r\n  \"status\": \"{{status}}\",\r\n  \"subject\": \"{{subject}}\",\r\n  \"content\": \"{{content}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/mp/let/patients/{{patientID}}/letters/{{letterID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"let",
								"patients",
								"{{patientID}}",
								"letters",
								"{{letterID}}"
							]
						},
						"description": "Test request related to updating a Letter"
					},
					"response": []
				},
				{
					"name": "Get a List of Letters by PatientID by Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const query_status = [\"STATUS_CONCEPT\",\"STATUS_SENT\"]\r",
									"pm.environment.set(\"query_status\",query_status[_.random(0,1)]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Letters should have status\", function(){\r",
									"    response.forEach(function(object){\r",
									"\r",
									"        pm.expect(object.status).to.eql(pm.environment.get(\"query_status\"));\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"pm.test(\"Response time should be below 300ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"query_status\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/let/patients/{{patientID}}/letters/letter-status?LetterStatusEnum={{query_status}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"let",
								"patients",
								"{{patientID}}",
								"letters",
								"letter-status"
							],
							"query": [
								{
									"key": "LetterStatusEnum",
									"value": "{{query_status}}"
								}
							]
						},
						"description": "Test request related to get a list of letters by patientID by status"
					},
					"response": []
				},
				{
					"name": "Get a List of Letters by PatientID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test('Has letter ID', function() {\r",
									"    let has_code = false;\r",
									"    let counter = 0;\r",
									"    response.forEach(function(object){\r",
									"      if(object.id === pm.environment.get(\"letterID\")) {\r",
									"         has_code = true;\r",
									"         counter++;\r",
									"      }\r",
									"  });\r",
									"    pm.expect((has_code) && (counter == 1) ).to.eql(true);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 589\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(589);",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/let/patients/{{patientID}}/letters",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"let",
								"patients",
								"{{patientID}}",
								"letters"
							]
						},
						"description": "Test request related to get a list of letters by patientID"
					},
					"response": []
				},
				{
					"name": "Delete a Letter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Letter should be deleted\", function () {\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.deletedId).to.eql(pm.environment.get(\"letterID\"));\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 162\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(162);",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/let/patients/{{patientID}}/letters/{{letterID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"let",
								"patients",
								"{{patientID}}",
								"letters",
								"{{letterID}}"
							]
						},
						"description": "Test request related to deleting a Letter by ID"
					},
					"response": []
				},
				{
					"name": "Get a List of Letters by PatientID (deleted letter should not be present)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test('Has ID', function() {\r",
									"    let has_code = false;\r",
									"    response.forEach(function(object){\r",
									"      if(object.id === pm.environment.get(\"letterID\")) {\r",
									"         has_code = true;\r",
									"      }\r",
									"  });\r",
									"    pm.expect(has_code).to.eql(false);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Response is not null\"] = jsonData !== null ;\r",
									"\r",
									"// response time should be below 300ms\r",
									"pm.test(\"Response time is below 551\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(551);",
									"});\r",
									"\r",
									"pm.environment.unset(\"patientID\");\r",
									"pm.environment.unset(\"practitionerID\");\r",
									"pm.environment.unset(\"letterID\");\r",
									"pm.environment.unset(\"letterTemplateID\");\r",
									"pm.environment.unset(\"status\");\r",
									"pm.environment.unset(\"codeSpecialism\");\r",
									"pm.environment.unset(\"subject\");\r",
									"pm.environment.unset(\"toID\");\r",
									"pm.environment.unset(\"recipientPractitionerID\");\r",
									"pm.environment.unset(\"letterRecipientID\");\r",
									"pm.environment.unset(\"recipientType\");\r",
									"pm.environment.unset(\"content\");\r",
									"pm.environment.unset(\"appointmentID\");\r",
									"pm.environment.unset(\"examinationID\");\r",
									"pm.environment.unset(\"page\");\r",
									"pm.environment.unset(\"size\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mp/let/patients/{{patientID}}/letters",
							"host": [
								"{{host}}"
							],
							"path": [
								"mp",
								"let",
								"patients",
								"{{patientID}}",
								"letters"
							]
						},
						"description": "Validate that the previously deleted Letter is no longer present"
					},
					"response": []
				}
			],
			"description": "Test request regarding Letter\r\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "tokenType",
				"value": "",
				"type": "string"
			},
			{
				"key": "accessToken",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function getvar(variableName) {",
					"    let value = pm.environment.get(variableName);",
					"    if (!value) throw new Error(",
					"        `Variable '${variableName}' is not defined. Do you forget to select an environment?`);",
					"    return value;",
					"}",
					"",
					"let host = getvar(\"keycloak.host\");",
					"let client_id = getvar(\"keycloak.client-id\");",
					"let client_secret = getvar(\"keycloak.client-secret\");",
					"let requestOption = {",
					"    url: host + '/auth/realms/medical-portal/protocol/openid-connect/token',",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/x-www-form-urlencoded',",
					"          },",
					"      body: {",
					"        mode: 'urlencoded',",
					"        'urlencoded': [",
					"            {key: \"username\", value: 'mpadmin'},",
					"            {key: \"password\", value: 'passpass'},",
					"            {key: \"client_id\", value: client_id},",
					"            {key: \"client_secret\", value: client_secret},",
					"            {key: \"scope\", value: 'openid'},",
					"            {key: \"grant_type\", value: \"password\"}",
					"        ]",
					"      }",
					"}",
					"",
					"let getToken = true;",
					"",
					"if (!pm.environment.get('accessTokenExpiry') || ",
					"    !pm.environment.get('access_token')) {",
					"    console.log('Token or expiry date are missing')",
					"} else if (pm.environment.get('accessTokenExpiry') <= (new Date()).getTime()) {",
					"    console.log('Token is expired')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiry date are all good');",
					"}",
					"",
					"if (getToken === true) {",
					"    pm.sendRequest(requestOption,  function(err, response) {",
					"        console.log(err ? err : response.json());",
					"        if (err === null) {",
					"            console.log('Saving the token and expiry date')",
					"            const jsonResponse = response.json();",
					"            pm.environment.set(\"access_token\", jsonResponse.access_token);",
					"    ",
					"            var expiryDate = new Date();",
					"            expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"            pm.environment.set('accessTokenExpiry', expiryDate.getTime());",
					"        }",
					"    })",
					"}    "
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}